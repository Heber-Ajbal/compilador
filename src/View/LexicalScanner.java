/* The following code was generated by JFlex 1.6.1 */

package View;

// Java Libraries
import java.util.ArrayList;

class Yytoken {
    public String token;
    public int line;
    public int column;
    public int length;
    public String type;
    public boolean error;
    public String color;

    Yytoken(String token, int line, int column, String type, boolean error, String color) {
        this.token = token;
        this.line = line + 1;
        this.column = column + 1;
        this.length = token.length() - 1;
        this.type = type;
        this.error = error;
        this.color = color;
    }

    public String toString() {
        int aux = column + length;
        return token + "\t\tLínea " + line + "\tcolumnas " + column + "-" + aux + "\tes " + type + "\tColor: " + color;
    }

    public String isError() {
        int aux = column + length;
        return "*** Error Léxico. Línea: " + line + " Columnas: " + column + "-" + aux + " *** Mensaje de Error: " + type + " '" + token + "'";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/GAMECYBER/Documents/GitHub/compilador/src/analyzer/Lex.flex</tt>
 */
public class LexicalScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\45\1\64\1\50\1\44\22\0\1\46\1\66\1\62"+
    "\1\41\1\0\1\65\1\70\1\0\1\72\1\73\1\52\1\60\1\100"+
    "\1\60\1\57\1\51\1\54\11\53\1\0\1\100\1\66\1\67\1\66"+
    "\2\0\1\30\1\37\2\56\1\61\1\56\1\36\1\42\1\33\2\42"+
    "\1\34\1\35\1\27\1\42\1\24\1\42\1\32\1\36\4\42\1\55"+
    "\2\42\1\74\1\63\1\75\1\0\1\43\1\0\1\22\1\7\1\21"+
    "\1\4\1\11\1\15\1\14\1\17\1\1\1\42\1\40\1\10\1\25"+
    "\1\2\1\5\1\26\1\42\1\13\1\12\1\3\1\6\1\20\1\16"+
    "\1\23\1\31\1\42\1\76\1\71\1\77\7\0\1\64\u1fa2\0\1\64"+
    "\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\22\2\1\1\3\3\2\4\2\5\1\6"+
    "\1\4\1\1\1\4\2\1\3\6\1\2\1\7\25\2"+
    "\10\0\1\10\1\11\1\5\3\0\1\12\1\0\1\13"+
    "\20\2\1\7\3\2\1\14\11\0\2\10\3\0\1\5"+
    "\1\0\2\2\1\5\1\2\1\13\11\2\7\0\1\5"+
    "\1\0\13\2\4\0\5\2\3\0\4\2\1\0\3\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\101\0\u0596"+
    "\0\u05d7\0\101\0\u0618\0\u0659\0\101\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u0186\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb"+
    "\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3"+
    "\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb"+
    "\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103"+
    "\0\u1144\0\u06db\0\101\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699"+
    "\0\u16da\0\101\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860"+
    "\0\u18a1\0\u18e2\0\u1923\0\u1964\0\101\0\u19a5\0\u19e6\0\u1a27"+
    "\0\u1103\0\u1a68\0\u1aa9\0\u1aea\0\u0186\0\u1b2b\0\u0186\0\u1b6c"+
    "\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74"+
    "\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c"+
    "\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143"+
    "\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b"+
    "\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553"+
    "\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\7\1\14\1\15\1\7\1\16"+
    "\1\17\2\7\1\20\2\7\1\21\2\7\1\22\2\7"+
    "\1\23\1\24\2\7\1\25\1\7\1\2\1\26\2\27"+
    "\1\30\1\0\1\31\1\32\1\33\1\34\2\7\1\35"+
    "\1\36\1\7\1\37\1\2\1\0\1\32\2\40\1\41"+
    "\1\42\1\43\1\35\1\44\1\35\1\45\2\35\102\0"+
    "\1\7\1\46\12\7\1\47\7\7\1\50\13\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\5\7\1\51"+
    "\32\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\12\7\1\52\3\7\1\53\21\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\4\7\1\54\33\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\40\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\4\7\1\55"+
    "\5\7\1\56\25\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\7\7\1\57\12\7\1\60\15\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\2\7\1\61"+
    "\35\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\10\7\1\62\27\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\4\7\1\63\14\7\1\64\16\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\16\7\1\65"+
    "\21\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\4\7\1\66\33\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\7\7\1\67\30\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\12\7\1\70\25\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\10\7\1\71"+
    "\27\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\10\7\1\72\27\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\21\7\1\73\16\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\10\7\1\74\27\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\1\75\1\76"+
    "\1\0\1\77\1\0\1\100\1\0\1\101\1\102\1\0"+
    "\1\103\12\0\1\104\117\0\1\27\103\0\1\27\101\0"+
    "\1\105\1\106\101\0\2\33\2\0\1\107\44\0\1\110"+
    "\27\0\2\33\1\110\1\0\1\107\74\0\2\111\24\0"+
    "\45\112\1\0\14\112\1\113\1\114\15\112\67\0\1\32"+
    "\101\0\1\32\101\0\1\32\102\0\1\35\102\0\1\35"+
    "\102\0\1\35\2\0\2\7\1\115\35\7\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\20\0\25\7\1\116\12\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\20\0\7\7"+
    "\1\117\30\7\1\0\2\7\7\0\4\7\2\0\1\7"+
    "\20\0\5\7\1\120\32\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\20\0\1\121\37\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\5\7\1\122\32\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\4\7\1\123"+
    "\33\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\10\7\1\124\27\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\11\7\1\125\26\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\2\7\1\126\35\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\12\7\1\127"+
    "\25\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\2\7\1\130\35\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\12\7\1\47\25\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\7\7\1\131\30\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\1\132\37\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\20\0\1\133"+
    "\37\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\21\7\1\134\16\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\1\135\37\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\20\0\15\7\1\136\22\7\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\20\0\21\7\1\137\16\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\20\0\7\7"+
    "\1\140\30\7\1\0\2\7\7\0\4\7\2\0\1\7"+
    "\20\0\2\7\1\141\35\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\34\0\1\142\71\0\1\143\103\0\1\144"+
    "\71\0\1\145\77\0\1\146\101\0\1\147\5\0\1\150"+
    "\2\0\1\151\76\0\1\152\102\0\1\153\65\0\44\105"+
    "\1\154\1\155\33\105\51\106\1\156\1\157\26\106\11\0"+
    "\1\160\41\0\2\107\4\0\1\160\23\0\1\161\2\0"+
    "\1\161\1\0\1\161\3\0\1\161\3\0\2\161\5\0"+
    "\1\161\6\0\1\161\13\0\2\161\1\0\1\161\2\0"+
    "\1\161\72\0\2\111\2\0\1\162\21\0\44\112\2\0"+
    "\2\112\1\0\13\112\1\0\14\112\1\0\10\7\1\163"+
    "\27\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\7\7\1\164\30\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\7\7\1\47\30\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\10\7\1\165\27\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\11\7\1\47"+
    "\26\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\6\7\1\166\31\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\7\7\1\167\30\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\21\7\1\170\16\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\10\7\1\47"+
    "\27\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\10\7\1\171\27\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\1\172\37\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\20\0\5\7\1\173\32\7\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\20\0\11\7\1\120\26\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\20\0\7\7"+
    "\1\125\30\7\1\0\2\7\7\0\4\7\2\0\1\7"+
    "\20\0\3\7\1\167\34\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\20\0\11\7\1\121\26\7\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\20\0\1\7\1\174\36\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\20\0\27\7"+
    "\1\175\10\7\1\0\2\7\7\0\4\7\2\0\1\7"+
    "\20\0\3\7\1\176\34\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\20\0\7\7\1\177\30\7\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\20\0\36\7\1\200\1\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\27\0\1\201"+
    "\105\0\1\101\67\0\1\202\76\0\1\203\102\0\1\204"+
    "\75\0\1\75\10\0\1\203\101\0\1\205\101\0\1\206"+
    "\106\0\1\207\123\0\1\155\33\0\52\156\1\157\77\156"+
    "\1\155\1\157\26\156\53\0\2\210\3\0\1\211\31\0"+
    "\1\160\41\0\2\162\4\0\1\160\20\0\12\7\1\212"+
    "\25\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\10\7\1\213\27\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\7\7\1\214\30\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\37\7\1\47\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\20\0\1\7\1\215\36\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\20\0\1\7"+
    "\1\216\36\7\1\0\2\7\7\0\4\7\2\0\1\7"+
    "\20\0\12\7\1\217\25\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\20\0\2\7\1\47\35\7\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\20\0\12\7\1\220\25\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\20\0\32\7"+
    "\1\221\1\222\4\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\4\7\1\223\33\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\30\7\1\224\7\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\27\0\1\225\101\0"+
    "\1\75\100\0\1\142\70\0\1\75\11\0\1\103\72\0"+
    "\1\226\74\0\1\227\113\0\1\230\137\0\2\210\25\0"+
    "\14\7\1\231\23\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\24\7\1\232\13\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\10\7\1\167\27\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\3\7\1\121"+
    "\34\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\13\7\1\167\24\7\1\0\2\7\7\0\4\7\2\0"+
    "\1\7\20\0\1\7\1\47\36\7\1\0\2\7\7\0"+
    "\4\7\2\0\1\7\20\0\12\7\1\233\25\7\1\0"+
    "\2\7\7\0\4\7\2\0\1\7\20\0\1\7\1\234"+
    "\36\7\1\0\2\7\7\0\4\7\2\0\1\7\20\0"+
    "\1\235\37\7\1\0\2\7\7\0\4\7\2\0\1\7"+
    "\20\0\20\7\1\47\17\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\20\0\2\7\1\125\35\7\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\41\0\1\236\71\0\1\142"+
    "\72\0\1\237\120\0\1\240\54\0\21\7\1\241\16\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\20\0\10\7"+
    "\1\242\27\7\1\0\2\7\7\0\4\7\2\0\1\7"+
    "\20\0\21\7\1\243\16\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\20\0\2\7\1\244\35\7\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\20\0\1\7\1\125\36\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\26\0\1\245"+
    "\73\0\1\142\120\0\1\142\57\0\20\7\1\125\17\7"+
    "\1\0\2\7\7\0\4\7\2\0\1\7\20\0\1\7"+
    "\1\246\36\7\1\0\2\7\7\0\4\7\2\0\1\7"+
    "\20\0\30\7\1\47\7\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\20\0\10\7\1\247\27\7\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\27\0\1\203\71\0\2\7"+
    "\1\121\35\7\1\0\2\7\7\0\4\7\2\0\1\7"+
    "\20\0\13\7\1\250\24\7\1\0\2\7\7\0\4\7"+
    "\2\0\1\7\20\0\10\7\1\63\27\7\1\0\2\7"+
    "\7\0\4\7\2\0\1\7\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10140];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\1\11\2\1\1\11\2\1\1\11"+
    "\37\1\10\0\3\1\3\0\1\11\1\0\25\1\1\11"+
    "\11\0\1\1\1\11\3\0\1\1\1\0\16\1\7\0"+
    "\1\1\1\0\13\1\4\0\5\1\3\0\4\1\1\0"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public ArrayList<Yytoken> tokens;

    private String getColorForType(String tipo) {
        return switch (tipo.toLowerCase()) {
            case "palabra reservada" -> "#569CD6";
            case "tipo de dato" -> "#0000FF";
            case "identificador" -> "#FFFFFF";
            case "número" -> "#b5cea8";
            case "cadena" -> "#D69D85";
            case "operador" -> "#e9ccc0";
            case "signo de puntuación" -> "#dbb69a";
            case "Directiva de Procesamiento" -> "#fff333";
            case "error" -> "#FF1493";
            default -> "#AAAAAA";
        };
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
  this.tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String tipo = "error";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, true, getColorForType(tipo)));
            }
          case 13: break;
          case 2: 
            { String tipo = "identificador";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 14: break;
          case 3: 
            { /* ignorar */
            }
          case 15: break;
          case 4: 
            { String tipo = "operador";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 16: break;
          case 5: 
            { String tipo = "número";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 17: break;
          case 6: 
            { String tipo = "signo de puntuación";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 18: break;
          case 7: 
            { String tipo = "palabra reservada";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 19: break;
          case 8: 
            { String tipo = "comentario";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 20: break;
          case 9: 
            { String tipo = "error";
    this.tokens.add(new Yytoken("", yyline, yycolumn, "No se encontró el carácter '*/'", true, getColorForType(tipo)));
            }
          case 21: break;
          case 10: 
            { String tipo = "cadena";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 22: break;
          case 11: 
            { String tipo = "tipo de dato";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 23: break;
          case 12: 
            { String tipo = "Directiva de Procesamiento";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
