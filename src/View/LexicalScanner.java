/* The following code was generated by JFlex 1.6.1 */

/* User code */
package View;

//Java Libraries

import java.util.ArrayList;
import java_cup.runtime.Symbol;

class Yytoken{
    public String token;
    public int line;
    public int column;
    public int length;
    public String type;
    public boolean error;
    public String color;

    Yytoken(String token, int line, int column, String type, boolean error,String color){
        this.token = token;
        this.line = line+1;
        this.column = column+1;
        this.length = token.length()-1;
        this.type = type;
        this.error = error;
        this.color = color;
    }

     Yytoken(String token, int line, int column, String type, boolean error) {
            this(token, line, column, type, error, "#000000"); // o cualquier color por defecto
        }

    public String toString(){
        int aux = column + length;
        if(this.type.equals("T_Identifier")){
            if(token.length() > 31){
                String temp = this.token.substring(0,31);
                String aditional = this.token.substring(31);
                return temp + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type + " Number of characters greater than 31 - Discarded characters {"+aditional+"}";
            }
            else{
                return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
            }
        }
        else{
            return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
        }
    }

    public String isError(){
        int aux = column + length;
        return "*** Error LÃ©xico. Linea: " +line+ " Columnas: "+column+"-"+aux+" *** Mensaje Error: " + type + " \'" + token +"\'";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/omarm/IdeaProjects/Compilador/src/analyzer/Lexer.flex</tt>
 */
public class LexicalScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\52\1\50\1\65\1\53\1\47\22\0\1\51\1\77\1\63"+
    "\1\42\1\66\1\72\1\100\1\71\1\106\1\107\1\55\1\73\1\113"+
    "\1\61\1\46\1\54\1\56\11\45\1\104\1\112\1\74\1\75\1\76"+
    "\1\105\1\0\1\31\1\40\2\60\1\62\1\60\2\44\1\35\2\44"+
    "\1\36\1\44\1\30\1\44\1\33\1\44\1\34\1\37\4\44\1\57"+
    "\2\44\1\110\1\64\1\111\1\102\1\44\1\0\1\1\1\2\1\6"+
    "\1\15\1\7\1\23\1\22\1\14\1\17\1\32\1\12\1\11\1\21"+
    "\1\16\1\10\1\26\1\43\1\5\1\3\1\4\1\20\1\24\1\27"+
    "\1\25\1\13\1\41\1\70\1\101\1\67\1\103\6\0\1\65\u1fa2\0"+
    "\1\65\1\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\32\2\1\1\1\3\1\4\3\5\2\6"+
    "\1\3\1\7\2\1\1\10\1\11\1\1\1\12\1\13"+
    "\1\14\1\13\1\15\4\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\2\1\0\3\2"+
    "\1\27\26\2\1\27\6\2\1\27\4\2\1\30\1\27"+
    "\1\2\1\31\34\2\10\0\1\32\1\33\1\34\3\0"+
    "\1\35\2\0\1\36\2\0\1\13\1\37\1\40\1\41"+
    "\2\2\1\42\10\2\1\43\42\2\1\44\1\2\1\45"+
    "\7\2\1\46\3\2\1\47\15\2\1\44\5\2\7\0"+
    "\1\50\3\0\2\33\2\0\1\3\1\0\1\51\2\0"+
    "\1\52\2\2\1\53\6\2\1\54\1\2\1\55\10\2"+
    "\1\56\15\2\1\57\15\2\1\60\10\2\7\0\1\32"+
    "\1\0\1\61\13\2\1\62\17\2\1\63\3\2\1\64"+
    "\1\65\3\2\1\66\2\2\1\67\4\0\1\70\1\2"+
    "\1\71\4\2\1\72\5\2\1\73\4\2\1\74\5\2"+
    "\1\75\3\0\1\2\1\76\2\2\1\77\5\2\1\100"+
    "\1\101\1\2\1\102\1\0\1\2\1\103\1\2\1\104"+
    "\1\2\1\105\4\2\1\106\1\107\1\2\1\110\1\2"+
    "\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474"+
    "\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4"+
    "\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\114\0\u08e8"+
    "\0\114\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc"+
    "\0\114\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\u0c78\0\u0cc4\0\114"+
    "\0\u0d10\0\u0d5c\0\u09cc\0\114\0\114\0\114\0\114\0\114"+
    "\0\u0da8\0\114\0\114\0\114\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8"+
    "\0\u0f24\0\u0f70\0\u0fbc\0\u1008\0\u1054\0\u10a0\0\u10ec\0\u1138"+
    "\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300\0\u134c\0\u1398"+
    "\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8"+
    "\0\u1644\0\u1690\0\u0344\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c"+
    "\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u1988\0\u19d4\0\u0344\0\u1a20"+
    "\0\u1a6c\0\u0344\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u1c34"+
    "\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94"+
    "\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8\0\u20f4"+
    "\0\u2140\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354"+
    "\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4"+
    "\0\u2600\0\u264c\0\u2698\0\u0ab0\0\114\0\u26e4\0\u2730\0\114"+
    "\0\u277c\0\u27c8\0\114\0\114\0\114\0\114\0\u2814\0\u2860"+
    "\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u1008\0\u29dc\0\u2a28\0\u2a74"+
    "\0\u2ac0\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4"+
    "\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34"+
    "\0\u2f80\0\u2fcc\0\u3018\0\u3064\0\u30b0\0\u30fc\0\u3148\0\u3194"+
    "\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310\0\u335c\0\u33a8\0\u33f4"+
    "\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608\0\u3654"+
    "\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u37d0\0\u381c\0\u3868\0\u38b4"+
    "\0\u3900\0\u394c\0\u3998\0\u39e4\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14"+
    "\0\u3b60\0\u3bac\0\u3bf8\0\u3c44\0\u3c90\0\u3cdc\0\u3d28\0\u3d74"+
    "\0\u3dc0\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88\0\u3fd4"+
    "\0\u4020\0\u406c\0\u40b8\0\u4104\0\u4150\0\114\0\u419c\0\u41e8"+
    "\0\u4234\0\u4280\0\114\0\u42cc\0\u4318\0\u264c\0\u4364\0\114"+
    "\0\u43b0\0\u43fc\0\114\0\u4448\0\u4494\0\u0344\0\u44e0\0\u452c"+
    "\0\u4578\0\u45c4\0\u4610\0\u465c\0\u0344\0\u46a8\0\u0344\0\u46f4"+
    "\0\u4740\0\u478c\0\u47d8\0\u4824\0\u4870\0\u48bc\0\u4908\0\u0344"+
    "\0\u4954\0\u49a0\0\u49ec\0\u4a38\0\u4a84\0\u4ad0\0\u4b1c\0\u4b68"+
    "\0\u4bb4\0\u4c00\0\u4c4c\0\u4c98\0\u4ce4\0\u0344\0\u4d30\0\u4d7c"+
    "\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\u4ef8\0\u4f44\0\u4f90\0\u4fdc"+
    "\0\u5028\0\u5074\0\u50c0\0\u0344\0\u510c\0\u5158\0\u51a4\0\u51f0"+
    "\0\u523c\0\u5288\0\u52d4\0\u5320\0\u536c\0\u53b8\0\u5404\0\u5450"+
    "\0\u549c\0\u54e8\0\u5534\0\u5580\0\u5580\0\u0344\0\u55cc\0\u5618"+
    "\0\u5664\0\u56b0\0\u56fc\0\u5748\0\u5794\0\u57e0\0\u582c\0\u5878"+
    "\0\u58c4\0\u0344\0\u5910\0\u595c\0\u59a8\0\u59f4\0\u5a40\0\u5a8c"+
    "\0\u5ad8\0\u5b24\0\u5b70\0\u5bbc\0\u5c08\0\u5c54\0\u5ca0\0\u5cec"+
    "\0\u5d38\0\u0344\0\u5d84\0\u5dd0\0\u5e1c\0\u0344\0\u0344\0\u5e68"+
    "\0\u5eb4\0\u5f00\0\u0344\0\u5f4c\0\u5f98\0\u0344\0\u5fe4\0\u6030"+
    "\0\u607c\0\u60c8\0\u0344\0\u6114\0\u0344\0\u6160\0\u61ac\0\u61f8"+
    "\0\u6244\0\u0344\0\u6290\0\u62dc\0\u6328\0\u6374\0\u63c0\0\u0344"+
    "\0\u640c\0\u6458\0\u64a4\0\u64f0\0\u0344\0\u653c\0\u6588\0\u65d4"+
    "\0\u6620\0\u666c\0\u0344\0\u66b8\0\u6704\0\u6750\0\u679c\0\u0344"+
    "\0\u67e8\0\u6834\0\u0344\0\u6880\0\u68cc\0\u6918\0\u6964\0\u69b0"+
    "\0\u0344\0\u0344\0\u69fc\0\u0344\0\u6a48\0\u6a94\0\u0344\0\u6ae0"+
    "\0\u0344\0\u6b2c\0\u0344\0\u6b78\0\u6bc4\0\u6c10\0\u6c5c\0\u0344"+
    "\0\u0344\0\u6ca8\0\u0344\0\u6cf4\0\u0344\0\u0344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\14\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\14\1\26\1\27"+
    "\1\30\1\14\1\31\1\32\1\33\2\14\1\34\2\14"+
    "\1\35\2\14\1\36\1\37\1\40\2\41\1\42\1\0"+
    "\1\43\1\44\1\45\2\14\1\46\1\14\1\47\1\2"+
    "\1\0\1\50\1\51\1\52\1\53\1\44\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\115\0"+
    "\2\14\1\75\11\14\1\76\11\14\1\77\12\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\1\101"+
    "\3\14\1\102\2\14\1\103\2\14\1\104\26\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\1\14"+
    "\1\105\1\14\1\106\1\14\1\107\1\110\4\14\1\111"+
    "\2\14\1\112\7\14\1\113\12\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\4\14\1\114\5\14"+
    "\1\115\1\116\25\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\6\14\1\117\32\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\1\120\6\14"+
    "\1\121\1\122\2\14\1\123\25\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\10\14\1\124\4\14"+
    "\1\125\5\14\1\126\1\127\14\14\1\0\1\130\2\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\1\14\1\131"+
    "\2\14\1\132\10\14\1\133\1\14\1\134\3\14\1\135"+
    "\1\14\1\136\13\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\6\14\1\134\1\137\31\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\41\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\16\14\1\140\22\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\6\14\1\141\1\142\2\14\1\143"+
    "\26\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\1\144\5\14\1\145\10\14\1\146\21\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\2\14"+
    "\1\147\12\14\1\150\2\14\1\151\1\14\1\152\16\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\2\14\1\153\5\14\1\154\4\14\1\155\1\156\22\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\1\157\40\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\4\14\1\160\1\14\1\161\1\162\1\163"+
    "\30\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\1\164\3\14\1\165\2\14\1\166\1\167\5\14"+
    "\1\170\22\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\1\171\6\14\1\172\6\14\1\173\22\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\1\174\3\14\1\175\12\14\1\176\21\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\13\14\1\177"+
    "\2\14\1\200\22\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\6\14\1\201\32\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\7\14\1\202"+
    "\31\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\4\14\1\203\34\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\6\14\1\204\32\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\3\14"+
    "\1\205\2\14\1\206\32\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\36\0\1\207\1\0\1\210\1\0"+
    "\1\211\3\0\1\212\1\213\1\214\1\215\5\0\1\216"+
    "\132\0\1\36\1\217\7\0\1\36\105\0\1\41\116\0"+
    "\1\41\114\0\1\220\1\221\17\0\1\64\113\0\1\64"+
    "\43\0\1\222\17\0\1\36\1\217\7\0\1\36\1\222"+
    "\101\0\1\223\10\0\1\223\2\0\1\64\13\0\1\64"+
    "\16\0\50\224\1\0\12\224\1\225\1\226\27\224\63\0"+
    "\1\227\117\0\1\230\24\0\50\231\1\0\13\231\1\232"+
    "\4\231\1\0\22\231\45\0\1\223\10\0\1\223\14\0"+
    "\1\64\1\0\1\64\112\0\1\63\1\233\114\0\1\66"+
    "\112\0\1\233\1\63\112\0\1\64\2\0\1\234\110\0"+
    "\1\64\3\0\1\235\123\0\1\236\3\0\12\14\1\237"+
    "\26\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\14\14\1\133\24\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\1\240\40\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\41\241\1\0"+
    "\2\241\12\0\2\241\1\0\1\241\32\0\2\14\1\242"+
    "\36\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\6\14\1\243\32\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\7\14\1\244\31\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\3\14"+
    "\1\242\35\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\12\14\1\245\26\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\1\246\3\14\1\247"+
    "\34\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\7\14\1\250\31\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\1\251\2\14\1\252\4\14"+
    "\1\253\30\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\7\14\1\254\31\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\40\14\1\255\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\16\14"+
    "\1\256\22\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\12\14\1\133\4\14\1\257\21\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\25\14"+
    "\1\255\13\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\4\14\1\260\11\14\1\261\22\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\1\262"+
    "\2\14\1\263\1\14\1\264\12\14\1\265\1\14\1\133"+
    "\16\14\1\0\1\266\2\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\2\14\1\242\1\267\35\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\15\14\1\270"+
    "\23\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\1\271\40\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\1\272\5\14\1\273\32\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\2\14"+
    "\1\274\36\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\17\14\1\275\21\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\6\14\1\156\32\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\3\14\1\276\21\14\1\277\13\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\17\14\1\300\21\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\31\14\1\253\7\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\14\14\1\301\24\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\3\14\1\133"+
    "\35\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\6\14\1\302\32\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\6\14\1\303\32\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\5\14"+
    "\1\304\7\14\1\305\23\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\6\14\1\306\32\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\5\14"+
    "\1\307\2\14\1\310\11\14\1\311\16\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\17\14\1\312"+
    "\21\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\15\14\1\313\23\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\20\14\1\314\20\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\26\14"+
    "\1\315\12\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\10\14\1\316\30\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\3\14\1\317\12\14"+
    "\1\134\22\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\25\14\1\320\13\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\13\14\1\111\2\14"+
    "\1\321\22\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\7\14\1\322\31\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\2\14\1\323\2\14"+
    "\1\324\33\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\15\14\1\134\23\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\10\14\1\325\30\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\7\14\1\326\31\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\3\14\1\327\35\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\3\14\1\330"+
    "\35\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\7\14\1\331\31\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\10\14\1\332\30\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\7\14"+
    "\1\275\31\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\4\14\1\333\34\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\7\14\1\334\31\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\10\14\1\242\13\14\1\335\14\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\4\14\1\133\3\14"+
    "\1\336\30\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\10\14\1\337\5\14\1\340\22\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\4\14"+
    "\1\341\34\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\4\14\1\342\34\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\7\14\1\343\6\14"+
    "\1\344\22\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\1\14\1\345\37\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\6\14\1\346\7\14"+
    "\1\347\22\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\3\14\1\350\35\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\26\14\1\351\12\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\16\14\1\352\22\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\16\14\1\353\22\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\1\354\40\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\4\14\1\355\34\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\3\14\1\356\35\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\40\0\1\357\111\0"+
    "\1\360\3\0\1\361\4\0\1\362\114\0\1\363\103\0"+
    "\1\364\124\0\1\365\116\0\1\366\106\0\1\367\102\0"+
    "\1\370\115\0\1\371\35\0\1\217\10\0\1\217\3\0"+
    "\1\371\31\0\47\220\1\372\1\373\43\220\54\221\1\374"+
    "\1\375\36\221\1\0\2\376\3\0\2\376\5\0\1\376"+
    "\5\0\1\376\5\0\1\376\6\0\1\376\4\0\1\376"+
    "\10\0\1\376\1\0\1\376\1\0\1\376\76\0\1\223"+
    "\1\377\7\0\1\223\35\0\47\224\2\0\2\224\1\0"+
    "\11\224\1\0\26\224\50\227\1\0\12\227\1\u0100\1\u0101"+
    "\2\227\1\0\1\u0102\23\227\71\0\1\u0103\23\0\2\231"+
    "\1\0\2\231\10\0\1\231\4\0\2\231\31\0\1\231"+
    "\4\0\2\231\4\0\1\231\23\0\15\14\1\u0104\23\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\16\14\1\134\22\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\41\241\1\0\3\241\1\100\7\0"+
    "\3\241\1\0\1\241\32\0\6\14\1\133\32\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\1\u0105"+
    "\40\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\10\14\1\u0106\30\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\3\14\1\u0107\1\14\1\u0108"+
    "\33\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\16\14\1\u0109\1\u010a\21\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\25\14\1\335\13\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\10\14\1\335\30\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\1\14\1\u010b\37\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\6\14\1\u010a"+
    "\32\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\4\14\1\134\34\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\6\14\1\u010c\32\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\3\14"+
    "\1\267\35\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\6\14\1\u010d\32\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\7\14\1\u010e\31\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\2\14\1\u010f\36\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\14\14\1\u0110\24\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\17\14\1\u0111"+
    "\21\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\7\14\1\u0112\31\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\7\14\1\u0113\31\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\17\14"+
    "\1\u0114\21\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\5\14\1\350\33\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\2\14\1\134\1\u0115"+
    "\35\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\2\14\1\u0116\36\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\4\14\1\133\34\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\5\14"+
    "\1\u0117\33\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\6\14\1\u0118\32\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\20\14\1\133\20\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\6\14\1\u0119\32\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\10\14\1\u011a\30\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\1\u011b\40\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\6\14\1\u011c\32\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\4\14\1\u011d\34\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\4\14\1\u011e"+
    "\34\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\11\14\1\133\27\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\21\14\1\133\17\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\10\14"+
    "\1\76\30\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\16\14\1\u011f\22\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\6\14\1\u0120\32\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\1\u0121\40\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\1\14\1\u0122\37\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\1\u0123\40\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\6\14"+
    "\1\u0124\32\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\1\u0125\40\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\10\14\1\u0126\30\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\6\14"+
    "\1\u0127\1\133\31\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\10\14\1\u0128\30\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\15\14\1\u0129"+
    "\23\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\15\14\1\305\23\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\1\u012a\40\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\13\14\1\u012b"+
    "\25\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\10\14\1\u012c\30\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\17\14\1\u012d\21\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\1\14"+
    "\1\u012e\37\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\7\14\1\133\31\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\1\14\1\u012f\37\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\2\14\1\u0130\36\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\6\14\1\u0131\32\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\1\u0132\40\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\6\14\1\76\32\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\17\14\1\242\21\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\1\u0133\40\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\14\14\1\u0134\24\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\3\14\1\u0135\35\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\1\u0136\40\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\3\14\1\u0137\35\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\15\14\1\u0138\5\14\1\u0139\15\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\10\14\1\u013a\30\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\4\14\1\242\34\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\10\14\1\u013b"+
    "\30\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\13\14\1\133\25\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\30\14\1\u0125\10\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\15\14"+
    "\1\133\23\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\15\14\1\u0138\23\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\14\14\1\u013c\24\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\16\14\1\u0109\22\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\37\14\1\u010b\1\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\53\0\1\u013d\76\0"+
    "\1\u013e\111\0\1\u013f\13\0\1\214\111\0\1\u0140\114\0"+
    "\1\u013f\120\0\1\211\101\0\1\u0141\117\0\1\u0142\77\0"+
    "\1\u0143\157\0\1\u0144\10\0\1\u0144\2\0\1\u0145\11\0"+
    "\1\u0145\70\0\1\373\43\0\55\374\1\375\112\374\1\373"+
    "\1\375\36\374\7\0\1\371\35\0\1\377\10\0\1\377"+
    "\3\0\1\371\31\0\47\227\2\0\2\227\1\0\11\227"+
    "\1\0\26\227\67\u0102\1\227\24\u0102\1\0\5\14\1\133"+
    "\33\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\11\14\1\u0146\27\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\16\14\1\u0147\22\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\11\14"+
    "\1\u0148\27\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\15\14\1\u0149\23\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\5\14\1\134\33\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\12\14\1\u014a\26\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\7\14\1\u014b\31\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\26\14\1\133"+
    "\12\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\7\14\1\u014c\1\u014d\5\14\1\u014e\22\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\4\14"+
    "\1\u014f\34\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\4\14\1\76\34\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\23\14\1\242\15\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\16\14\1\u0150\22\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\16\14\1\u0151\22\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\2\14\1\u0152"+
    "\36\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\11\14\1\335\27\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\4\14\1\352\10\14\1\u0153"+
    "\23\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\16\14\1\u0154\22\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\10\14\1\u0155\30\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\4\14"+
    "\1\u0156\34\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\4\14\1\u0157\34\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\1\u0158\40\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\20\14"+
    "\1\u0159\20\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\21\14\1\u015a\17\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\17\14\1\u015b\21\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\10\14\1\u015c\30\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\20\14\1\u015d\20\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\2\14\1\u015e"+
    "\4\14\1\u014b\31\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\4\14\1\u015f\34\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\4\14\1\u0160"+
    "\34\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\6\14\1\u0161\7\14\1\u0154\22\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\21\14\1\u0162"+
    "\17\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\22\14\1\242\16\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\6\14\1\273\32\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\7\14"+
    "\1\u0163\31\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\25\14\1\133\13\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\12\14\1\u0164\26\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\1\u0165\40\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\6\14\1\u0166\32\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\1\267\40\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\3\14"+
    "\1\u0167\35\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\3\14\1\u0168\35\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\17\14\1\u0169\21\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\20\14\1\u0155\20\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\6\14\1\u016a\32\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\3\14\1\u016b"+
    "\35\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\1\u016c\40\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\16\14\1\u016d\22\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\6\14\1\u016e"+
    "\32\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\34\14\1\u014e\1\u014d\3\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\50\0\1\u016f\104\0\1\u0170"+
    "\112\0\1\366\111\0\1\207\11\0\1\214\105\0\1\u0171"+
    "\111\0\1\214\126\0\1\u0172\136\0\1\u0144\10\0\1\u0144"+
    "\36\0\5\14\1\u0173\33\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\1\u0174\40\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\21\14\1\u0175"+
    "\17\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\3\14\1\u0176\35\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\22\14\1\133\16\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\15\14"+
    "\1\u0177\23\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\16\14\1\u0178\22\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\15\14\1\u0179\23\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\15\14\1\u017a\23\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\4\14\1\335\34\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\15\14\1\336"+
    "\23\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\14\14\1\u017b\24\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\5\14\1\240\33\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\2\14"+
    "\1\133\36\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\1\14\1\u017c\37\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\16\14\1\u017d\22\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\3\14\1\u017e\35\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\1\u017f\40\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\1\245\40\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\10\14"+
    "\1\134\30\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\6\14\1\u0180\32\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\16\14\1\u0104\22\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\25\14\1\u0181\13\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\4\14\1\u0182\34\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\15\14\1\u012f"+
    "\4\14\1\u0183\16\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\20\14\1\u0184\20\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\5\14\1\u0185"+
    "\33\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\3\14\1\u0186\35\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\10\14\1\133\30\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\16\14"+
    "\1\u0187\22\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\1\u0188\40\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\5\14\1\u0189\33\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\3\14"+
    "\1\u018a\35\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\5\14\1\u018b\33\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\41\0\1\u018c\110\0\1\366"+
    "\107\0\1\u018d\133\0\1\u018e\73\0\10\14\1\u018f\30\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\6\14\1\u0190\32\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\10\14\1\u017c\30\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\15\14\1\u0191"+
    "\23\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\3\14\1\u0192\35\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\2\14\1\u0193\36\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\12\14"+
    "\1\133\26\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\14\14\1\u0194\24\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\7\14\1\272\31\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\10\14\1\u0167\30\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\1\u0195\40\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\1\u0196\40\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\1\u0197"+
    "\40\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\6\14\1\u0198\32\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\6\14\1\u0199\32\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\10\14"+
    "\1\242\30\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\10\14\1\u019a\30\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\3\14\1\u019b\35\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\6\14\1\u019c\32\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\47\0\1\366\77\0\1\u019d\112\0\1\366"+
    "\113\0\10\14\1\u019e\30\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\6\14\1\u019f\32\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\6\14"+
    "\1\u01a0\32\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\6\14\1\u01a1\32\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\5\14\1\u01a2\33\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\12\14\1\u01a3\26\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\5\14\1\u01a4\33\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\15\14\1\u01a5"+
    "\23\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\6\14\1\u01a6\32\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\42\0\1\u013f\103\0\7\14\1\u0104"+
    "\31\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\32\0\21\14\1\u01a7\17\14\1\0\3\14\1\100\7\0"+
    "\3\14\1\0\1\14\32\0\6\14\1\u01a8\32\14\1\0"+
    "\3\14\1\100\7\0\3\14\1\0\1\14\32\0\6\14"+
    "\1\u01a9\32\14\1\0\3\14\1\100\7\0\3\14\1\0"+
    "\1\14\32\0\3\14\1\u01aa\35\14\1\0\3\14\1\100"+
    "\7\0\3\14\1\0\1\14\32\0\14\14\1\u01ab\24\14"+
    "\1\0\3\14\1\100\7\0\3\14\1\0\1\14\32\0"+
    "\6\14\1\u01ac\32\14\1\0\3\14\1\100\7\0\3\14"+
    "\1\0\1\14\32\0\2\14\1\u01ad\36\14\1\0\3\14"+
    "\1\100\7\0\3\14\1\0\1\14\32\0\4\14\1\u01ae"+
    "\34\14\1\0\3\14\1\100\7\0\3\14\1\0\1\14"+
    "\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27968];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\1\11\1\1\1\11\7\1\1\11"+
    "\6\1\1\11\3\1\5\11\1\1\3\11\3\1\1\0"+
    "\106\1\10\0\3\1\3\0\1\11\2\0\1\11\2\0"+
    "\4\11\120\1\7\0\1\11\3\0\1\1\1\11\2\0"+
    "\1\1\1\0\1\11\2\0\1\11\71\1\7\0\1\1"+
    "\1\0\51\1\4\0\31\1\3\0\16\1\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private Symbol symbol(int type){
    return new Symbol(type, yyline, yycolumn, yytext());
}

private Symbol symbol(int type, Object value){
    return new Symbol(type, yyline, yycolumn, value);
}

public ArrayList<Yytoken> tokens; /* our variable for storing token's info that will be the output */

private String typeReservedWords(String text){
    return  "T_" + text.substring(0, 1).toUpperCase() + text.substring(1);
}

private String typeNumbers(String text, String type){
    return type + " (value = " + text + ")";
}

private String isError(String token, int line, int column, int length, String error){
    int aux = column + length;
    return "*** Line " +line+ " *** Cols "+column+"-"+aux+" *** " + error + " \'" + token +"\'";
}

private String getColorForType(String tipo) {
    return switch (tipo.toLowerCase()) {
        case "tipo de dato","t_int", "t_double", "t_bool", "t_void" -> "#8B5CF6"; // tipos de datos
        case "t_identifier" -> "#000000";
        case "t_logicalconstant", "t_intconstant", "t_doubleconstant", "t_string" -> "#10B981"; // constantes
        case "unrecognized char", "the character '*/' wasn't found" -> "#FF1493"; // errores
        case "operador","+", "-", "*", "/", "%", "=", "==", "!=", "<", ">", "<=", ">=", "&&", "||", "!" -> "#fb5404"; // operadores
        case "signo de puntuaciÃ³n",";", ",", ".", "(", ")", "[", "]", "{", "}" -> "#E11D48"; // puntuaciÃ³n
        case "directiva de procesamiento" -> "#DB3069";
        case "cadena" -> "#F59E0B";
        case "comentario" -> "#1bb400";
        default -> "#2563EB"; // palabras reservadas por defecto
    };
}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
  this.tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Unrecognized char", true)); /* It's error so it doesn't return nothing */
            }
          case 75: break;
          case 2: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_Identifier", false)); return symbol(sym.ident);
            }
          case 76: break;
          case 3: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_IntConstant"), false)); return symbol(sym.integerConstant);
            }
          case 77: break;
          case 4: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.dot);
            }
          case 78: break;
          case 5: 
            { /* ignore */
            }
          case 79: break;
          case 6: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ArithmeticOperators);
            }
          case 80: break;
          case 7: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.negative);
            }
          case 81: break;
          case 8: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedCurlyBracket);
            }
          case 82: break;
          case 9: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningCurlyBracket);
            }
          case 83: break;
          case 10: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.sum);
            }
          case 84: break;
          case 11: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ComparisonOperators);
            }
          case 85: break;
          case 12: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.assignment);
            }
          case 86: break;
          case 13: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.denial);
            }
          case 87: break;
          case 14: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false,getColorForType("operador"))); return symbol(sym.dot);
            }
          case 88: break;
          case 15: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false,getColorForType("signo de puntuaciÃ³n"))); return symbol(sym.colon);
            }
          case 89: break;
          case 16: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false,getColorForType("signo de puntuaciÃ³n"))); return symbol(sym.dot);
            }
          case 90: break;
          case 17: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningParenthesis);
            }
          case 91: break;
          case 18: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedParenthesis);
            }
          case 92: break;
          case 19: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningBracket);
            }
          case 93: break;
          case 20: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedBracket);
            }
          case 94: break;
          case 21: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.pyc);
            }
          case 95: break;
          case 22: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.comma);
            }
          case 96: break;
          case 23: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sAbstract);
            }
          case 97: break;
          case 24: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("operador"))); return symbol(sym.sAbstract);
            }
          case 98: break;
          case 25: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.cIf);
            }
          case 99: break;
          case 26: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_DoubleConstant"), false)); return symbol(sym.doubleConstant);
            }
          case 100: break;
          case 27: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Comentario", false,getColorForType("comentario")));
            }
          case 101: break;
          case 28: 
            { this.tokens.add(new Yytoken("", yyline, yycolumn, "The character '*/' wasn't found", true)); /* It's error so it doesn't return nothing */
            }
          case 102: break;
          case 29: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_String"), false)); return symbol(sym.stringConstant);
            }
          case 103: break;
          case 30: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.CurlyBrackets);
            }
          case 104: break;
          case 31: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.and);
            }
          case 105: break;
          case 32: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.or);
            }
          case 106: break;
          case 33: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.Brackets);
            }
          case 107: break;
          case 34: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_Identifier", false)); return symbol(sym.namespaceName);
            }
          case 108: break;
          case 35: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sSet);
            }
          case 109: break;
          case 36: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNew);
            }
          case 110: break;
          case 37: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.INT);
            }
          case 111: break;
          case 38: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sGet);
            }
          case 112: break;
          case 39: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.lFor);
            }
          case 113: break;
          case 114: break;
          case 41: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_String", false)); return symbol(sym.stringConstant);
            }
          case 115: break;
          case 42: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "caracter", false)); return symbol(sym.stringConstant);
            }
          case 116: break;
          case 43: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.BOOL);
            }
          case 117: break;
          case 44: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.boolConstant);
            }
          case 118: break;
          case 45: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sThis);
            }
          case 119: break;
          case 46: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.cElse);
            }
          case 120: break;
          case 47: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNull);
            }
          case 121: break;
          case 48: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.sVoid);
            }
          case 122: break;
          case 49: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sBreak);
            }
          case 123: break;
          case 50: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sClass);
            }
          case 124: break;
          case 51: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sUsing);
            }
          case 125: break;
          case 52: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("t_logicalconstant"))); return symbol(sym.boolConstant);
            }
          case 126: break;
          case 53: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.sAbstract);
            }
          case 127: break;
          case 54: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sPrint);
            }
          case 128: break;
          case 55: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.lWhile);
            }
          case 129: break;
          case 56: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sStatic);
            }
          case 130: break;
          case 57: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.STRING);
            }
          case 131: break;
          case 58: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sReturn);
            }
          case 132: break;
          case 59: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.DOUBLE);
            }
          case 133: break;
          case 60: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sMalloc);
            }
          case 134: break;
          case 61: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sPublic);
            }
          case 135: break;
          case 62: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sSetByte);
            }
          case 136: break;
          case 137: break;
          case 64: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sGetByte);
            }
          case 138: break;
          case 65: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sVirtual);
            }
          case 139: break;
          case 66: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sPrivate);
            }
          case 140: break;
          case 67: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sReadLine);
            }
          case 141: break;
          case 68: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sOverride);
            }
          case 142: break;
          case 69: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNewArray);
            }
          case 143: break;
          case 70: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNameSpace);
            }
          case 144: break;
          case 71: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sInterface);
            }
          case 145: break;
          case 72: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sProtected);
            }
          case 146: break;
          case 147: break;
          case 74: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sReadInteger);
            }
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
