/* The following code was generated by JFlex 1.6.1 */

package View;

// Java Libraries
import java.util.ArrayList;

class Yytoken {
    public String token;
    public int line;
    public int column;
    public int length;
    public String type;
    public boolean error;
    public String color;

    Yytoken(String token, int line, int column, String type, boolean error, String color) {
        this.token = token;
        this.line = line + 1;
        this.column = column + 1;
        this.length = token.length() - 1;
        this.type = type;
        this.error = error;
        this.color = color;
    }

    public String toString() {
        int aux = column + length;
        return token + "\t\tLínea " + line + "\tcolumnas " + column + "-" + aux + "\tes " + type + "\tColor: " + color;
    }

    public String isError() {
        int aux = column + length;
        return "*** Error Léxico. Línea: " + line + " Columnas: " + column + "-" + aux + " *** Mensaje de Error: " + type + " '" + token + "'";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/omarm/IdeaProjects/Compilador/src/analyzer/Lex.flex</tt>
 */
public class LexicalScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\51\1\41\1\43\1\44\1\42\22\0\1\50\1\62\1\36"+
    "\1\33\1\35\1\62\1\67\1\71\1\74\1\75\1\53\1\63\1\73"+
    "\1\60\1\57\1\52\1\54\11\47\1\73\1\73\1\64\1\65\1\66"+
    "\1\73\1\0\4\56\1\61\1\56\14\46\1\32\4\46\1\55\2\46"+
    "\1\76\1\40\1\77\1\62\1\46\1\0\1\1\1\2\1\6\1\15"+
    "\1\7\1\23\1\22\1\14\1\17\1\30\1\12\1\11\1\21\1\16"+
    "\1\10\1\26\1\34\1\5\1\3\1\4\1\20\1\24\1\27\1\25"+
    "\1\13\1\31\1\45\1\70\1\37\1\72\6\0\1\43\u1fa2\0\1\43"+
    "\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\27\2\3\1\1\3\2\4\1\3\1\5"+
    "\1\4\2\6\1\5\7\6\1\1\1\6\2\3\1\2"+
    "\1\7\5\2\1\7\25\2\1\7\6\2\1\7\4\2"+
    "\1\7\31\2\12\0\1\10\1\0\1\5\1\11\1\12"+
    "\4\0\13\2\1\7\40\2\1\7\1\2\1\13\10\2"+
    "\1\7\20\2\7\0\1\14\5\0\2\11\2\0\1\5"+
    "\1\0\1\15\2\2\1\13\50\2\7\0\1\5\1\0"+
    "\26\2\4\0\11\2\3\0\3\2\1\0\3\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\100\0\100\0\u0700\0\u0740"+
    "\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940"+
    "\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\100\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u02c0\0\u1280\0\u12c0"+
    "\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0"+
    "\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0"+
    "\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0"+
    "\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u06c0\0\100\0\u1e00\0\u1e40"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040"+
    "\0\u2080\0\u20c0\0\u2100\0\u2140\0\u0d00\0\u2180\0\u21c0\0\u2200"+
    "\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400"+
    "\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600"+
    "\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800"+
    "\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00"+
    "\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00"+
    "\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00"+
    "\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000"+
    "\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200"+
    "\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\100\0\u3380\0\u33c0"+
    "\0\u3400\0\u3440\0\u3480\0\100\0\u34c0\0\u3500\0\u3540\0\u1f00"+
    "\0\u3580\0\100\0\u35c0\0\u3600\0\u02c0\0\u3640\0\u3680\0\u36c0"+
    "\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0"+
    "\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0"+
    "\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0"+
    "\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0"+
    "\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0"+
    "\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4200\0\u4240\0\u4280"+
    "\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400\0\u4440\0\u4480"+
    "\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680"+
    "\0\u46c0\0\u4700\0\u4740\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880"+
    "\0\u48c0\0\u4900\0\u4940\0\u4980\0\u49c0\0\u4a00\0\u4a40\0\u4a80"+
    "\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40\0\u4c80"+
    "\0\u4cc0\0\u4d00\0\u4d40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\14\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\14\1\26\1\27"+
    "\1\30\1\14\1\31\1\32\1\14\1\33\1\34\1\35"+
    "\1\2\1\36\1\37\2\0\1\40\1\14\1\41\1\36"+
    "\1\42\1\43\1\44\1\45\2\14\1\35\1\46\1\14"+
    "\1\44\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\35\1\57\1\35\1\60\1\35\101\0\1\14"+
    "\1\61\1\62\11\14\1\63\11\14\1\64\3\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\1\65\3\14\1\66\2\14\1\67\2\14\1\70\17\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\1\14\1\71\1\14\1\72\1\14\1\73\1\74"+
    "\4\14\1\75\2\14\1\76\7\14\1\77\3\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\4\14\1\100\5\14\1\101\1\102\16\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\6\14"+
    "\1\103\23\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\1\104\6\14\1\105\1\106\2\14"+
    "\1\107\16\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\10\14\1\65\4\14\1\110\5\14"+
    "\1\111\1\112\5\14\1\0\1\113\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\1\14\1\114\2\14\1\115"+
    "\10\14\1\116\1\14\1\117\3\14\1\120\1\14\1\121"+
    "\4\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\6\14\1\117\1\122\22\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\32\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\16\14\1\123\13\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\6\14\1\124\1\125"+
    "\2\14\1\126\17\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\1\127\5\14\1\130\10\14"+
    "\1\131\12\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\2\14\1\116\12\14\1\132\2\14"+
    "\1\133\1\14\1\116\7\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\2\14\1\134\5\14"+
    "\1\135\4\14\1\136\1\137\13\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\1\140\31\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\4\14\1\141\1\14\1\142\1\143\1\144\21\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\1\145\3\14\1\146\2\14\1\147\1\150\5\14"+
    "\1\151\13\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\1\152\6\14\1\153\6\14\1\154"+
    "\13\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\1\155\3\14\1\156\12\14\1\157\12\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\13\14\1\160\2\14\1\161\13\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\7\14"+
    "\1\162\22\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\3\14\1\163\26\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\23\0\1\164"+
    "\1\0\1\165\1\0\1\166\3\0\1\167\1\170\1\171"+
    "\1\172\5\0\1\173\107\0\1\174\41\0\36\175\1\176"+
    "\1\175\1\177\1\0\36\175\41\0\1\36\75\0\1\35"+
    "\107\0\1\41\4\0\1\41\2\0\1\200\64\0\1\36"+
    "\105\0\1\201\1\202\11\0\1\56\77\0\1\56\37\0"+
    "\1\203\21\0\1\41\4\0\1\41\1\203\1\0\1\200"+
    "\67\0\1\204\4\0\1\204\3\0\1\56\4\0\1\56"+
    "\61\0\1\204\4\0\1\204\6\0\1\56\1\0\1\56"+
    "\76\0\1\44\1\56\77\0\1\56\1\35\76\0\1\56"+
    "\1\44\76\0\1\56\1\0\1\56\75\0\1\56\2\0"+
    "\1\56\7\0\40\205\1\206\1\0\27\205\1\0\6\205"+
    "\75\0\1\35\101\0\1\35\1\0\2\14\1\207\27\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\12\14\1\210\17\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\14\14\1\116\15\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\1\211\31\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\2\14\1\212\27\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\6\14\1\213\23\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\7\14\1\214\22\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\3\14\1\212\26\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\12\14\1\215\17\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\1\216\3\14\1\217\25\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\7\14\1\220\22\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\1\221\2\14\1\222\4\14\1\223\21\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\7\14\1\224\22\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\30\14\1\225\1\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\16\14\1\226\13\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\12\14\1\116\4\14\1\212"+
    "\12\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\25\14\1\225\4\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\4\14\1\227"+
    "\11\14\1\230\13\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\1\231\2\14\1\232\1\14"+
    "\1\233\12\14\1\234\1\14\1\116\7\14\1\0\1\235"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\2\14"+
    "\1\212\1\236\26\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\15\14\1\237\14\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\1\240\31\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\1\241\5\14\1\242\23\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\17\14\1\243\12\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\6\14\1\137\23\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\3\14\1\244\21\14\1\245\4\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\17\14\1\246"+
    "\12\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\27\14\1\223\2\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\14\14\1\247"+
    "\15\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\3\14\1\116\26\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\6\14\1\250"+
    "\23\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\6\14\1\251\23\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\5\14\1\252"+
    "\7\14\1\253\14\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\6\14\1\254\23\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\5\14\1\255\2\14\1\256\11\14\1\257\7\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\17\14\1\260\12\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\15\14\1\261\14\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\20\14\1\262\11\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\26\14\1\263\3\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\10\14\1\264\21\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\3\14\1\265\12\14\1\117"+
    "\13\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\25\14\1\266\4\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\13\14\1\75"+
    "\2\14\1\267\13\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\7\14\1\267\22\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\2\14\1\270\2\14\1\271\24\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\15\14\1\117"+
    "\14\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\10\14\1\272\21\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\7\14\1\273"+
    "\22\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\3\14\1\222\26\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\3\14\1\274"+
    "\26\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\7\14\1\275\22\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\10\14\1\65"+
    "\21\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\7\14\1\243\22\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\4\14\1\276"+
    "\25\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\7\14\1\277\22\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\10\14\1\212"+
    "\4\14\1\300\6\14\1\301\5\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\4\14\1\116"+
    "\3\14\1\302\21\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\10\14\1\303\5\14\1\304"+
    "\13\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\4\14\1\305\25\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\4\14\1\306"+
    "\25\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\7\14\1\307\6\14\1\310\13\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\1\14\1\311\30\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\6\14\1\312\7\14\1\313"+
    "\13\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\3\14\1\314\26\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\16\14\1\315"+
    "\13\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\4\14\1\316\25\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\25\0\1\317\75\0"+
    "\1\320\3\0\1\321\4\0\1\322\100\0\1\323\67\0"+
    "\1\324\110\0\1\325\102\0\1\326\72\0\1\327\66\0"+
    "\1\330\72\0\36\174\1\176\1\0\1\331\1\0\3\174"+
    "\1\332\32\174\41\175\4\0\33\175\7\0\1\333\37\0"+
    "\1\200\4\0\1\200\4\0\1\333\16\0\41\201\1\334"+
    "\1\335\35\201\52\202\1\336\1\337\24\202\1\0\2\340"+
    "\3\0\2\340\5\0\1\340\5\0\1\340\23\0\1\340"+
    "\4\0\1\340\1\0\1\340\2\0\1\340\65\0\1\204"+
    "\4\0\1\204\2\0\1\341\111\0\1\342\7\0\2\205"+
    "\1\0\2\205\10\0\1\205\4\0\2\205\11\0\1\205"+
    "\1\0\1\205\13\0\1\205\14\0\1\205\7\0\3\14"+
    "\1\343\26\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\15\14\1\344\14\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\16\14"+
    "\1\117\13\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\6\14\1\116\23\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\1\252"+
    "\31\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\10\14\1\345\21\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\3\14\1\346"+
    "\1\14\1\347\24\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\16\14\1\350\1\351\12\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\25\14\1\301\4\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\10\14\1\301\21\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\1\14\1\71\30\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\6\14\1\351\23\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\4\14\1\117\25\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\6\14\1\352\23\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\3\14\1\236\26\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\7\14\1\353\22\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\2\14\1\116\27\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\14\14\1\354\15\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\17\14\1\355\12\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\7\14\1\356\22\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\7\14\1\357\22\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\17\14\1\360\12\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\5\14\1\314\24\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\2\14\1\117\1\361"+
    "\26\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\2\14\1\230\27\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\4\14\1\116"+
    "\25\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\5\14\1\362\24\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\20\14\1\116"+
    "\11\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\6\14\1\363\23\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\10\14\1\364"+
    "\21\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\1\365\31\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\6\14\1\366\23\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\4\14\1\367\25\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\4\14\1\370\25\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\11\14\1\116\20\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\21\14\1\116\10\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\10\14\1\63\21\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\16\14\1\371\13\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\6\14\1\372\23\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\1\373\31\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\1\14\1\374\30\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\1\375\31\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\6\14"+
    "\1\376\23\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\1\377\31\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\10\14\1\116"+
    "\21\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\6\14\1\u0100\1\116\22\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\10\14"+
    "\1\u0101\21\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\15\14\1\253\14\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\1\u0102"+
    "\31\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\13\14\1\u0103\16\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\10\14\1\u0104"+
    "\21\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\17\14\1\u0105\12\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\7\14\1\116"+
    "\22\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\1\14\1\u0106\30\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\6\14\1\u0107"+
    "\23\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\1\117\31\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\1\u0108\31\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\6\14\1\63\23\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\17\14\1\212\12\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\1\u0109\31\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\14\14\1\345\15\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\3\14"+
    "\1\u010a\26\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\1\u010b\31\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\3\14\1\u010c"+
    "\26\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\15\14\1\117\5\14\1\u010d\6\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\10\14\1\346\21\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\4\14\1\212\25\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\10\14\1\212\21\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\13\14\1\116\16\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\15\14\1\116\14\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\16\14\1\350\13\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\40\0"+
    "\1\u010e\62\0\1\u010f\75\0\1\u0110\13\0\1\171\75\0"+
    "\1\u0111\100\0\1\u0110\104\0\1\166\65\0\1\u0112\103\0"+
    "\1\u0113\63\0\1\u0114\76\0\41\174\4\0\33\174\37\332"+
    "\1\174\40\332\47\0\1\u0115\4\0\1\u0115\3\0\1\u0116"+
    "\2\0\1\u0116\55\0\1\334\36\0\53\336\1\337\76\336"+
    "\1\334\1\337\24\336\7\0\1\333\37\0\1\341\4\0"+
    "\1\341\4\0\1\333\17\0\4\14\1\u0117\25\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\5\14\1\116\24\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\16\14\1\344\13\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\11\14\1\22\20\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\15\14\1\u0118\14\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\5\14\1\117\24\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\7\14\1\u0119\22\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\26\14\1\116\3\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\7\14\1\u011a\1\u011b\5\14"+
    "\1\u011c\13\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\4\14\1\315\25\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\4\14"+
    "\1\63\25\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\23\14\1\212\6\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\16\14"+
    "\1\u011d\13\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\16\14\1\u011e\13\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\11\14"+
    "\1\301\20\14\1\0\1\14\11\0\2\14\4\0\3\14"+
    "\2\0\1\14\17\0\4\14\1\315\10\14\1\u011f\14\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\16\14\1\u0120\13\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\10\14\1\230\21\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\4\14\1\u0121\25\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\4\14\1\u0122\25\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\17\0\1\u0123\31\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\20\14\1\u0106\11\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\21\14\1\u010d\10\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\17\14\1\u0124\12\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\10\14\1\u0125\21\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\20\14\1\346\11\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\2\14\1\u0126\4\14\1\u0119\22\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\4\14\1\u0127"+
    "\25\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\4\14\1\u0128\25\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\6\14\1\u0129"+
    "\7\14\1\u0120\13\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\22\14\1\212\7\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\6\14\1\242\23\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\7\14\1\344\22\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\25\14\1\116\4\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\1\264\31\14\1\0\1\14"+
    "\11\0\2\14\4\0\3\14\2\0\1\14\17\0\1\236"+
    "\31\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\10\14\1\u012a\21\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\3\14\1\u012b"+
    "\26\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\17\14\1\u0106\12\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\20\14\1\230"+
    "\11\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\6\14\1\u012c\23\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\1\215\31\14"+
    "\1\0\1\14\11\0\2\14\4\0\3\14\2\0\1\14"+
    "\35\0\1\u012d\70\0\1\u012e\76\0\1\326\75\0\1\164"+
    "\11\0\1\171\71\0\1\u012f\75\0\1\171\112\0\1\u0130"+
    "\124\0\1\u0115\4\0\1\u0115\24\0\1\351\31\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\21\14\1\345\10\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\22\14\1\116\7\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\15\14\1\u012a\14\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\16\14\1\u0131\13\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\15\14\1\u0132\14\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\4\14\1\301\25\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\15\14\1\302\14\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\14\14\1\230\15\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\5\14\1\211\24\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\1\14\1\u0133\30\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\16\14\1\u0134\13\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\3\14\1\u0135\26\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\10\14\1\117\21\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\6\14\1\345\23\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\25\14\1\u0136\4\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\4\14\1\u0137\25\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\15\14\1\u0106\4\14\1\u0136\7\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\20\14\1\u0138"+
    "\11\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\10\14\1\u0133\21\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\16\14\1\313"+
    "\13\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\5\14\1\u0139\24\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\26\0\1\u013a\74\0"+
    "\1\326\73\0\1\u013b\117\0\1\u013c\57\0\15\14\1\212"+
    "\14\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\3\14\1\u013d\26\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\12\14\1\116"+
    "\17\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\14\14\1\212\15\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\7\14\1\241"+
    "\22\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\1\u013e\31\14\1\0\1\14\11\0\2\14"+
    "\4\0\3\14\2\0\1\14\17\0\1\u0133\31\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\6\14\1\u013f\23\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\3\14\1\301\26\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\34\0"+
    "\1\326\63\0\1\u0140\76\0\1\326\77\0\6\14\1\u0141"+
    "\23\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\17\0\5\14\1\212\24\14\1\0\1\14\11\0"+
    "\2\14\4\0\3\14\2\0\1\14\17\0\15\14\1\u0142"+
    "\14\14\1\0\1\14\11\0\2\14\4\0\3\14\2\0"+
    "\1\14\27\0\1\u0110\67\0\21\14\1\u0143\10\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\17\0"+
    "\3\14\1\230\26\14\1\0\1\14\11\0\2\14\4\0"+
    "\3\14\2\0\1\14\17\0\6\14\1\241\23\14\1\0"+
    "\1\14\11\0\2\14\4\0\3\14\2\0\1\14\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\32\1\2\11\17\1\1\11\105\1\12\0"+
    "\1\11\1\0\3\1\4\0\110\1\7\0\1\11\5\0"+
    "\1\11\1\1\2\0\1\1\1\0\1\11\53\1\7\0"+
    "\1\1\1\0\26\1\4\0\11\1\3\0\3\1\1\0"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public ArrayList<Yytoken> tokens;

/*asignar color a nuestros tokens*/
    private String getColorForType(String tipo) {
        return switch (tipo.toLowerCase()) {
            case "palabra reservada" -> "#2563EB";
            case "tipo de dato" -> "#8B5CF6";
            case "identificador" -> "#000000";
            case "número" -> "#10B981";
            case "cadena" -> "#F59E0B";
            case "operador" -> "#5B2E48";
            case "comentario" -> "#1bb400";
            case "signo de puntuación" -> "#EC4899";
            case "directiva de procesamiento" -> "#DB3069";
            case "error" -> "#FF1493";
            default -> "#000000";
        };
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
  this.tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String tipo = "error";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, true, getColorForType(tipo)));
            }
          case 14: break;
          case 2: 
            { String tipo = "identificador";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 15: break;
          case 3: 
            { String tipo = "signo de puntuación";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 16: break;
          case 4: 
            { /* ignorar */
            }
          case 17: break;
          case 5: 
            { String tipo = "número";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 18: break;
          case 6: 
            { String tipo = "operador";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 19: break;
          case 7: 
            { String tipo = "palabra reservada";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 20: break;
          case 8: 
            { String tipo = "cadena";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 21: break;
          case 9: 
            { String tipo = "comentario";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 22: break;
          case 10: 
            { String tipo = "error";
    this.tokens.add(new Yytoken("", yyline, yycolumn, "No se encontró el carácter '*/'", true, getColorForType(tipo)));
            }
          case 23: break;
          case 11: 
            { String tipo = "tipo de dato";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 24: break;
          case 12: 
            { String tipo = "Directiva de Procesamiento";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
            }
          case 25: break;
          case 13: 
            { String tipo = "carácter";
    this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, "#F59E0B"));
            }
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
