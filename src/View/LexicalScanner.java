/* The following code was generated by JFlex 1.6.1 */

/* User code */
package View;

//Java Libraries

import java.util.ArrayList;
import java_cup.runtime.Symbol;

class Yytoken{
    public String token;
    public int line;
    public int column;
    public int length;
    public String type;
    public boolean error;
    public String color;

    Yytoken(String token, int line, int column, String type, boolean error,String color){
        this.token = token;
        this.line = line+1;
        this.column = column+1;
        this.length = token.length()-1;
        this.type = type;
        this.error = error;
        this.color = color;
    }

     Yytoken(String token, int line, int column, String type, boolean error) {
            this(token, line, column, type, error, "#000000"); // o cualquier color por defecto
        }

    public String toString(){
        int aux = column + length;
        if(this.type.equals("T_Identifier")){
            if(token.length() > 31){
                String temp = this.token.substring(0,31);
                String aditional = this.token.substring(31);
                return temp + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type + " Number of characters greater than 31 - Discarded characters {"+aditional+"}";
            }
            else{
                return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
            }
        }
        else{
            return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
        }
    }

    public String isError(){
        int aux = column + length;
        return "*** Error LÃ©xico. Linea: " +line+ " Columnas: "+column+"-"+aux+" *** Mensaje Error: " + type + " \'" + token +"\'";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/omarm/IdeaProjects/Compilador/src/analyzer/Lexer.flex</tt>
 */
public class LexicalScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\51\1\47\1\63\1\52\1\46\22\0\1\50\1\75\1\61"+
    "\1\42\1\64\1\70\1\76\1\67\1\104\1\105\1\54\1\71\1\111"+
    "\1\57\1\56\1\53\1\55\11\45\1\102\1\110\1\72\1\73\1\74"+
    "\1\103\1\0\1\31\1\40\2\44\1\60\1\44\2\44\1\35\2\44"+
    "\1\36\1\44\1\30\1\44\1\33\1\44\1\34\1\37\4\44\1\44"+
    "\2\44\1\106\1\62\1\107\1\100\1\44\1\0\1\1\1\2\1\6"+
    "\1\15\1\7\1\23\1\22\1\14\1\17\1\32\1\12\1\11\1\21"+
    "\1\16\1\10\1\26\1\43\1\5\1\3\1\4\1\20\1\24\1\27"+
    "\1\25\1\13\1\41\1\66\1\77\1\65\1\101\6\0\1\63\u1fa2\0"+
    "\1\63\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\32\2\1\1\1\3\3\4\2\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\13\1\15\4\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\5\2\1\27\26\2\1\27"+
    "\7\2\1\30\4\2\1\31\1\32\1\2\1\33\34\2"+
    "\10\0\1\34\1\35\1\36\1\37\1\0\1\40\1\0"+
    "\1\41\2\0\1\42\2\0\1\13\1\43\1\44\1\45"+
    "\12\2\1\46\4\2\1\47\7\2\1\50\15\2\1\51"+
    "\13\2\1\52\1\2\1\53\7\2\1\54\3\2\1\55"+
    "\16\2\1\52\5\2\7\0\1\56\3\0\2\36\3\0"+
    "\1\57\2\0\1\60\2\2\1\61\7\2\1\62\1\2"+
    "\1\63\5\2\1\64\4\2\1\65\15\2\1\66\16\2"+
    "\1\67\10\2\7\0\1\35\1\0\1\70\13\2\1\71"+
    "\1\2\1\72\17\2\1\73\3\2\1\74\1\2\1\75"+
    "\5\2\1\76\2\2\1\77\4\0\1\100\1\2\1\101"+
    "\1\2\1\102\3\2\1\103\6\2\1\104\4\2\1\105"+
    "\5\2\1\106\2\2\1\107\3\0\1\2\1\110\2\2"+
    "\1\111\1\2\1\112\4\2\1\113\1\114\1\115\1\116"+
    "\1\2\1\117\1\0\1\2\1\120\1\2\1\121\1\2"+
    "\1\122\4\2\1\123\1\124\1\2\1\125\1\2\1\126"+
    "\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c\0\u0456"+
    "\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c\0\u06a6"+
    "\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\112"+
    "\0\u08f6\0\u0940\0\u098a\0\112\0\u09d4\0\u0a1e\0\u0a68\0\112"+
    "\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\u0c24\0\112\0\u0c6e"+
    "\0\u0cb8\0\u098a\0\112\0\112\0\112\0\112\0\112\0\u0d02"+
    "\0\112\0\112\0\112\0\u0d4c\0\u0d96\0\u0de0\0\u0e2a\0\u0e74"+
    "\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4"+
    "\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314"+
    "\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564"+
    "\0\u032e\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720\0\u176a"+
    "\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u032e\0\u1926\0\u1970"+
    "\0\u032e\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76"+
    "\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6"+
    "\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016"+
    "\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266"+
    "\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6"+
    "\0\u2500\0\u254a\0\112\0\u0a1e\0\112\0\u2594\0\u25de\0\112"+
    "\0\u2628\0\u2672\0\112\0\112\0\112\0\112\0\u26bc\0\u2706"+
    "\0\u2750\0\u279a\0\u27e4\0\u0f08\0\u282e\0\u2878\0\u28c2\0\u290c"+
    "\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u032e\0\u2ac8\0\u2b12"+
    "\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u032e\0\u2cce\0\u2d18"+
    "\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68"+
    "\0\u2fb2\0\u2ffc\0\u3046\0\u032e\0\u3090\0\u30da\0\u3124\0\u316e"+
    "\0\u31b8\0\u3202\0\u324c\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be"+
    "\0\u3408\0\u3452\0\u349c\0\u34e6\0\u3530\0\u357a\0\u35c4\0\u360e"+
    "\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e"+
    "\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64\0\u3aae"+
    "\0\u3af8\0\u3b42\0\u3b8c\0\u3bd6\0\u3c20\0\u3c6a\0\u3cb4\0\u3cfe"+
    "\0\u3d48\0\u3d92\0\u3ddc\0\u3e26\0\u3e70\0\u3eba\0\u3f04\0\u3f4e"+
    "\0\u3f98\0\112\0\u3fe2\0\u402c\0\u4076\0\u40c0\0\112\0\u410a"+
    "\0\u4154\0\u419e\0\112\0\u41e8\0\u4232\0\112\0\u427c\0\u42c6"+
    "\0\u032e\0\u4310\0\u435a\0\u43a4\0\u43ee\0\u4438\0\u4482\0\u44cc"+
    "\0\u032e\0\u4516\0\u032e\0\u4560\0\u45aa\0\u45f4\0\u463e\0\u4688"+
    "\0\u032e\0\u46d2\0\u471c\0\u4766\0\u47b0\0\u032e\0\u47fa\0\u4844"+
    "\0\u488e\0\u48d8\0\u4922\0\u496c\0\u49b6\0\u4a00\0\u4a4a\0\u4a94"+
    "\0\u4ade\0\u4b28\0\u4b72\0\u032e\0\u4bbc\0\u4c06\0\u4c50\0\u4c9a"+
    "\0\u4ce4\0\u4d2e\0\u4d78\0\u4dc2\0\u4e0c\0\u4e56\0\u4ea0\0\u4eea"+
    "\0\u4f34\0\u4f7e\0\u032e\0\u4fc8\0\u5012\0\u505c\0\u50a6\0\u50f0"+
    "\0\u513a\0\u5184\0\u51ce\0\u5218\0\u5262\0\u52ac\0\u52f6\0\u5340"+
    "\0\u538a\0\u53d4\0\u541e\0\u541e\0\u032e\0\u5468\0\u54b2\0\u54fc"+
    "\0\u5546\0\u5590\0\u55da\0\u5624\0\u566e\0\u56b8\0\u5702\0\u574c"+
    "\0\u032e\0\u5796\0\u032e\0\u57e0\0\u582a\0\u5874\0\u58be\0\u5908"+
    "\0\u5952\0\u599c\0\u59e6\0\u5a30\0\u5a7a\0\u5ac4\0\u5b0e\0\u5b58"+
    "\0\u5ba2\0\u5bec\0\u032e\0\u5c36\0\u5c80\0\u5cca\0\u032e\0\u5d14"+
    "\0\u032e\0\u5d5e\0\u5da8\0\u5df2\0\u5e3c\0\u5e86\0\u032e\0\u5ed0"+
    "\0\u5f1a\0\u032e\0\u5f64\0\u5fae\0\u5ff8\0\u6042\0\u032e\0\u608c"+
    "\0\u032e\0\u60d6\0\u032e\0\u6120\0\u616a\0\u61b4\0\u032e\0\u61fe"+
    "\0\u6248\0\u6292\0\u62dc\0\u6326\0\u6370\0\u032e\0\u63ba\0\u6404"+
    "\0\u644e\0\u6498\0\u032e\0\u64e2\0\u652c\0\u6576\0\u65c0\0\u660a"+
    "\0\u032e\0\u6654\0\u669e\0\u032e\0\u66e8\0\u6732\0\u677c\0\u67c6"+
    "\0\u032e\0\u6810\0\u685a\0\u032e\0\u68a4\0\u032e\0\u68ee\0\u6938"+
    "\0\u6982\0\u69cc\0\u032e\0\u032e\0\u032e\0\u032e\0\u6a16\0\u032e"+
    "\0\u6a60\0\u6aaa\0\u032e\0\u6af4\0\u032e\0\u6b3e\0\u032e\0\u6b88"+
    "\0\u6bd2\0\u6c1c\0\u6c66\0\u032e\0\u032e\0\u6cb0\0\u032e\0\u6cfa"+
    "\0\u032e\0\u032e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\14\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\14\1\26\1\27"+
    "\1\30\1\14\1\31\1\32\1\33\2\14\1\34\2\14"+
    "\1\35\2\14\1\36\1\37\2\40\1\41\1\0\1\42"+
    "\1\43\1\36\1\44\1\45\1\14\1\46\1\2\1\0"+
    "\1\47\1\50\1\51\1\52\1\43\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\113\0\2\14"+
    "\1\74\11\14\1\75\11\14\1\76\12\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\1\77\3\14\1\100"+
    "\2\14\1\101\2\14\1\102\26\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\1\14\1\103\1\14\1\104"+
    "\1\14\1\105\1\106\4\14\1\107\2\14\1\110\7\14"+
    "\1\111\12\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\4\14\1\112\5\14\1\113\1\114\25\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\6\14\1\115"+
    "\32\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\1\116\6\14\1\117\1\120\2\14\1\121\25\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\10\14\1\122"+
    "\4\14\1\123\5\14\1\124\1\125\14\14\1\0\1\126"+
    "\2\14\7\0\1\14\2\0\1\14\32\0\1\14\1\127"+
    "\2\14\1\130\10\14\1\131\1\14\1\132\3\14\1\133"+
    "\1\14\1\134\13\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\6\14\1\135\1\136\31\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\41\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\16\14\1\137\22\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\140\1\141\2\14\1\142\26\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\1\143\5\14\1\144\10\14"+
    "\1\145\21\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\2\14\1\146\12\14\1\147\2\14\1\150\1\14"+
    "\1\151\16\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\2\14\1\152\5\14\1\153\4\14\1\154\1\155"+
    "\22\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\1\156\40\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\4\14\1\157\1\14\1\160\1\161\1\162\30\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\1\163"+
    "\3\14\1\164\2\14\1\165\1\166\5\14\1\167\22\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\1\170"+
    "\6\14\1\171\6\14\1\172\22\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\1\173\3\14\1\174\12\14"+
    "\1\175\21\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\13\14\1\176\2\14\1\177\22\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\6\14\1\200\32\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\7\14"+
    "\1\201\31\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\4\14\1\202\34\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\6\14\1\203\32\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\3\14\1\204\2\14"+
    "\1\205\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\36\0\1\206\1\0\1\207\1\0\1\210\3\0\1\211"+
    "\1\212\1\213\1\214\5\0\1\215\64\0\41\216\1\0"+
    "\2\216\1\36\7\0\1\36\1\217\1\0\1\216\100\0"+
    "\1\40\114\0\1\40\112\0\1\220\1\221\16\0\1\63"+
    "\111\0\1\63\63\0\1\222\7\0\1\222\1\0\1\223"+
    "\13\0\1\63\16\0\47\224\1\0\11\224\1\225\1\226"+
    "\27\224\61\0\1\227\115\0\1\230\24\0\47\231\1\0"+
    "\12\231\1\232\4\231\1\0\22\231\45\0\1\222\7\0"+
    "\1\222\13\0\1\223\1\0\1\63\110\0\1\62\1\233"+
    "\112\0\1\65\110\0\1\233\1\62\110\0\1\63\2\0"+
    "\1\234\106\0\1\63\3\0\1\235\121\0\1\236\3\0"+
    "\12\14\1\237\26\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\14\14\1\131\24\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\1\240\40\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\2\14\1\241\36\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\242\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\7\14\1\243\31\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\3\14\1\241\35\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\12\14\1\244\26\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\1\245"+
    "\3\14\1\246\34\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\7\14\1\247\31\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\1\250\2\14\1\251\4\14"+
    "\1\252\30\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\7\14\1\253\31\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\40\14\1\254\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\16\14\1\255\22\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\12\14\1\256"+
    "\4\14\1\257\21\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\25\14\1\254\13\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\4\14\1\260\11\14\1\261"+
    "\22\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\1\262\2\14\1\263\1\14\1\264\12\14\1\265\1\14"+
    "\1\266\16\14\1\0\1\267\2\14\7\0\1\14\2\0"+
    "\1\14\32\0\2\14\1\270\1\271\35\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\15\14\1\272\23\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\1\273"+
    "\40\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\1\274\5\14\1\275\32\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\2\14\1\276\36\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\17\14\1\277\21\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\155\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\3\14\1\300\21\14\1\301\13\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\17\14\1\302\21\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\31\14"+
    "\1\252\7\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\14\14\1\303\24\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\3\14\1\304\35\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\6\14\1\305\32\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\306\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\3\14\1\131\35\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\5\14\1\307\7\14\1\310\23\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\311\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\5\14\1\312\2\14\1\313\11\14\1\314\16\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\17\14"+
    "\1\315\21\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\15\14\1\316\23\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\20\14\1\317\20\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\26\14\1\320\12\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\10\14"+
    "\1\321\30\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\3\14\1\322\12\14\1\135\22\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\25\14\1\323\13\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\13\14"+
    "\1\107\2\14\1\324\22\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\7\14\1\325\31\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\2\14\1\326\2\14"+
    "\1\327\33\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\15\14\1\135\23\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\10\14\1\330\30\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\7\14\1\331\31\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\3\14"+
    "\1\332\35\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\3\14\1\333\35\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\7\14\1\334\31\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\10\14\1\335\30\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\7\14"+
    "\1\277\31\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\4\14\1\336\34\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\7\14\1\337\31\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\10\14\1\241\4\14"+
    "\1\340\6\14\1\341\14\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\4\14\1\131\3\14\1\342\30\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\10\14"+
    "\1\343\5\14\1\344\22\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\4\14\1\345\34\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\4\14\1\346\34\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\7\14"+
    "\1\347\6\14\1\350\22\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\1\14\1\351\37\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\6\14\1\352\7\14"+
    "\1\353\22\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\3\14\1\354\35\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\26\14\1\355\12\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\16\14\1\356\22\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\16\14"+
    "\1\357\22\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\1\360\40\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\4\14\1\361\34\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\3\14\1\362\35\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\40\0\1\363\107\0"+
    "\1\364\3\0\1\365\4\0\1\366\112\0\1\367\101\0"+
    "\1\370\122\0\1\371\114\0\1\372\104\0\1\373\100\0"+
    "\1\374\105\0\41\216\1\0\3\216\7\0\1\216\2\0"+
    "\1\216\40\0\1\375\35\0\1\217\7\0\1\217\2\0"+
    "\1\375\31\0\46\220\1\376\1\377\42\220\53\221\1\u0100"+
    "\1\u0101\35\221\45\0\1\222\7\0\1\222\1\u0102\33\0"+
    "\46\224\2\0\2\224\1\0\10\224\1\0\26\224\47\227"+
    "\1\0\11\227\1\u0103\1\u0104\2\227\1\0\1\u0105\23\227"+
    "\67\0\1\u0106\23\0\2\231\1\0\2\231\10\0\1\231"+
    "\4\0\2\231\30\0\1\231\3\0\2\231\4\0\1\231"+
    "\23\0\15\14\1\u0107\23\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\16\14\1\135\22\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\6\14\1\131\32\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\1\u0108"+
    "\40\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\10\14\1\u0109\30\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\3\14\1\u010a\1\14\1\u010b\33\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\16\14\1\u010c"+
    "\1\u010d\21\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\25\14\1\341\13\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\10\14\1\341\30\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\1\14\1\u010e\37\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\u010d\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\4\14\1\135\34\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\6\14\1\u010f\32\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\3\14\1\u0110\35\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\u0111\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\7\14\1\u0112\31\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\2\14\1\u0113\36\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\14\14\1\u0114\24\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\17\14"+
    "\1\u0115\21\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\7\14\1\u0116\31\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\7\14\1\u0117\31\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\17\14\1\u0118\21\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\u0119\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\5\14\1\u011a\33\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\2\14\1\135\1\u011b\35\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\2\14\1\u011c"+
    "\36\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\4\14\1\131\34\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\5\14\1\u011d\33\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\6\14\1\u011e\32\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\20\14\1\131"+
    "\20\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\6\14\1\u011f\32\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\10\14\1\u0120\30\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\1\u0121\40\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\6\14\1\u0122\32\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\4\14"+
    "\1\u0123\34\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\4\14\1\u0124\34\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\11\14\1\131\27\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\21\14\1\131\17\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\10\14"+
    "\1\75\30\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\16\14\1\u0125\22\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\6\14\1\u0126\32\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\1\u0127\40\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\1\14\1\u0128"+
    "\37\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\1\u0129\40\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\6\14\1\u012a\32\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\1\u012b\40\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\10\14\1\u012c\30\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\6\14\1\u012d"+
    "\1\131\31\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\10\14\1\u012e\30\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\15\14\1\u012f\23\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\15\14\1\310\23\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\1\u0130"+
    "\40\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\13\14\1\u0131\25\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\10\14\1\u0132\30\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\17\14\1\u0133\21\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\1\14\1\u0134"+
    "\37\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\7\14\1\131\31\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\1\14\1\u0135\37\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\2\14\1\u0136\36\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\6\14\1\u0137"+
    "\32\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\1\u0138\40\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\1\u0139\40\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\6\14\1\75\32\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\17\14\1\241\21\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\1\u013a\40\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\14\14"+
    "\1\u013b\24\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\3\14\1\u013c\35\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\1\u013d\40\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\3\14\1\u013e\35\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\15\14\1\u013f"+
    "\5\14\1\u0140\15\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\10\14\1\u0141\30\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\4\14\1\241\34\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\10\14\1\u0142"+
    "\30\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\13\14\1\131\25\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\30\14\1\u012b\10\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\15\14\1\131\23\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\15\14\1\u013f"+
    "\23\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\14\14\1\u0143\24\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\16\14\1\u010c\22\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\37\14\1\u010e\1\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\53\0\1\u0144\74\0"+
    "\1\u0145\107\0\1\u0146\13\0\1\213\107\0\1\u0147\112\0"+
    "\1\u0146\116\0\1\210\77\0\1\u0148\115\0\1\u0149\75\0"+
    "\1\u014a\155\0\1\u014b\7\0\1\u014b\1\0\1\u014c\11\0"+
    "\1\u014c\67\0\1\377\42\0\54\u0100\1\u0101\110\u0100\1\377"+
    "\1\u0101\35\u0100\7\0\1\375\35\0\1\u0102\7\0\1\u0102"+
    "\2\0\1\375\31\0\46\227\2\0\2\227\1\0\10\227"+
    "\1\0\26\227\65\u0105\1\227\24\u0105\1\0\5\14\1\131"+
    "\33\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\11\14\1\u014d\27\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\16\14\1\u014e\22\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\11\14\1\u014f\27\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\15\14\1\u0150"+
    "\23\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\5\14\1\135\33\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\12\14\1\u0151\26\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\7\14\1\u0152\31\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\5\14\1\u0153"+
    "\33\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\26\14\1\131\12\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\7\14\1\u0154\1\u0155\5\14\1\u0156\22\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\4\14"+
    "\1\u0157\34\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\4\14\1\75\34\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\23\14\1\241\15\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\16\14\1\u0158\22\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\13\14"+
    "\1\u0159\25\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\16\14\1\u015a\22\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\2\14\1\u015b\36\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\11\14\1\341\27\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\4\14"+
    "\1\356\10\14\1\u015c\23\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\16\14\1\u015d\22\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\10\14\1\u015e\30\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\4\14"+
    "\1\u015f\34\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\4\14\1\u0160\34\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\1\u0161\40\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\20\14\1\u0162\20\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\21\14\1\u0163"+
    "\17\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\17\14\1\u0164\21\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\10\14\1\u0165\30\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\20\14\1\u0166\20\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\2\14\1\u0167"+
    "\4\14\1\u0152\31\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\4\14\1\u0168\34\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\4\14\1\u0169\34\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\6\14\1\u016a"+
    "\7\14\1\u015d\22\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\21\14\1\u016b\17\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\22\14\1\241\16\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\6\14\1\275"+
    "\32\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\7\14\1\u016c\31\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\25\14\1\131\13\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\12\14\1\u016d\26\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\1\u016e\40\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\u016f\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\1\u0170\40\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\3\14\1\u0171\35\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\10\14\1\u0172\30\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\3\14\1\u0173"+
    "\35\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\17\14\1\u0174\21\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\20\14\1\u0175\20\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\6\14\1\u0176\32\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\3\14\1\u0177"+
    "\35\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\1\u0178\40\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\16\14\1\u0179\22\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\6\14\1\u017a\32\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\34\14\1\u0156\1\u0155"+
    "\3\14\1\0\3\14\7\0\1\14\2\0\1\14\50\0"+
    "\1\u017b\102\0\1\u017c\110\0\1\372\107\0\1\206\11\0"+
    "\1\213\103\0\1\u017d\107\0\1\213\124\0\1\u017e\134\0"+
    "\1\u014b\7\0\1\u014b\35\0\5\14\1\u017f\33\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\1\u0180\40\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\21\14"+
    "\1\u0181\17\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\3\14\1\u0182\35\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\22\14\1\131\16\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\13\14\1\u0183\25\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\15\14"+
    "\1\u0184\23\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\16\14\1\u0185\22\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\15\14\1\u0186\23\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\15\14\1\u0187\23\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\4\14"+
    "\1\341\34\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\15\14\1\342\23\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\14\14\1\u0188\24\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\5\14\1\240\33\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\2\14"+
    "\1\131\36\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\1\14\1\u0189\37\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\16\14\1\u018a\22\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\3\14\1\u018b\35\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\1\u018c"+
    "\40\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\1\244\40\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\10\14\1\u018d\30\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\6\14\1\u018e\32\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\16\14\1\u0107\22\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\25\14"+
    "\1\u018f\13\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\4\14\1\u0190\34\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\15\14\1\u0135\4\14\1\u0191\16\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\20\14"+
    "\1\u0192\20\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\5\14\1\u0193\33\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\3\14\1\u0194\35\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\10\14\1\131\30\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\5\14"+
    "\1\u0195\33\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\10\14\1\u0196\30\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\16\14\1\u0197\22\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\1\u0198\40\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\2\14\1\u0199"+
    "\36\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\5\14\1\u019a\33\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\3\14\1\u019b\35\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\5\14\1\u019c\33\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\41\0\1\u019d\106\0"+
    "\1\372\105\0\1\u019e\131\0\1\u019f\71\0\10\14\1\u01a0"+
    "\30\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\6\14\1\u01a1\32\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\10\14\1\u0189\30\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\15\14\1\u01a2\23\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\3\14\1\u01a3"+
    "\35\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\2\14\1\u01a4\36\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\12\14\1\131\26\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\14\14\1\u01a5\24\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\7\14\1\274"+
    "\31\14\1\0\3\14\7\0\1\14\2\0\1\14\32\0"+
    "\10\14\1\u0171\30\14\1\0\3\14\7\0\1\14\2\0"+
    "\1\14\32\0\3\14\1\u01a6\35\14\1\0\3\14\7\0"+
    "\1\14\2\0\1\14\32\0\1\u01a7\40\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\1\u01a8\40\14\1\0"+
    "\3\14\7\0\1\14\2\0\1\14\32\0\1\u01a9\40\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\u01aa\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\6\14\1\u01ab\32\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\13\14\1\u01ac\25\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\12\14\1\u01ad\26\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\10\14"+
    "\1\241\30\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\10\14\1\u01ae\30\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\3\14\1\u01af\35\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\6\14\1\u01b0\32\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\47\0\1\372"+
    "\75\0\1\u01b1\110\0\1\372\111\0\10\14\1\u01b2\30\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\u01b3\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\6\14\1\u01b4\32\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\6\14\1\u01b5\32\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\5\14\1\u01b6\33\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\12\14"+
    "\1\u01b7\26\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\5\14\1\u01b8\33\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\15\14\1\u01b9\23\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\6\14\1\u01ba\32\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\42\0\1\u0146"+
    "\101\0\7\14\1\u0107\31\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\21\14\1\u01bb\17\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\6\14\1\u01bc\32\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\6\14"+
    "\1\u01bd\32\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\3\14\1\u01be\35\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\32\0\14\14\1\u01bf\24\14\1\0\3\14"+
    "\7\0\1\14\2\0\1\14\32\0\6\14\1\u01c0\32\14"+
    "\1\0\3\14\7\0\1\14\2\0\1\14\32\0\2\14"+
    "\1\u01c1\36\14\1\0\3\14\7\0\1\14\2\0\1\14"+
    "\32\0\4\14\1\u01c2\34\14\1\0\3\14\7\0\1\14"+
    "\2\0\1\14\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27972];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\1\11\3\1\1\11\3\1\1\11"+
    "\6\1\1\11\3\1\5\11\1\1\3\11\112\1\10\0"+
    "\4\1\1\0\1\11\1\0\1\11\2\0\1\11\2\0"+
    "\4\11\124\1\7\0\1\11\3\0\1\1\1\11\3\0"+
    "\1\11\2\0\1\11\75\1\7\0\1\1\1\0\56\1"+
    "\4\0\36\1\3\0\21\1\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private Symbol symbol(int type){
    return new Symbol(type, yyline, yycolumn, yytext());
}

private Symbol symbol(int type, Object value){
    return new Symbol(type, yyline, yycolumn, value);
}

public ArrayList<Yytoken> tokens; /* our variable for storing token's info that will be the output */

private String typeReservedWords(String text){
    return  "T_" + text.substring(0, 1).toUpperCase() + text.substring(1);
}

private String typeNumbers(String text, String type){
    return type + " (value = " + text + ")";
}

private String isError(String token, int line, int column, int length, String error){
    int aux = column + length;
    return "*** Line " +line+ " *** Cols "+column+"-"+aux+" *** " + error + " \'" + token +"\'";
}

private String getColorForType(String tipo) {
    return switch (tipo.toLowerCase()) {
        case "tipo de dato","t_int", "t_double", "t_bool", "t_void" -> "#8B5CF6"; // tipos de datos
        case "t_identifier" -> "#000000";
        case "t_logicalconstant", "t_intconstant", "t_doubleconstant", "t_string" -> "#10B981"; // constantes
        case "unrecognized char", "the character '*/' wasn't found" -> "#FF1493"; // errores
        case "operador","+", "-", "*", "/", "%", "=", "==", "!=", "<", ">", "<=", ">=", "&&", "||", "!" -> "#fb5404"; // operadores
        case "signo de puntuaciÃ³n",";", ",", ".", "(", ")", "[", "]", "{", "}" -> "#E11D48"; // puntuaciÃ³n
        case "directiva de procesamiento" -> "#DB3069";
        case "cadena" -> "#F59E0B";
        case "comentario" -> "#1bb400";
        default -> "#2563EB"; // palabras reservadas por defecto
    };
}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
  this.tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Unrecognized char", true)); /* It's error so it doesn't return nothing */
            }
          case 88: break;
          case 2: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_Identifier", false)); return symbol(sym.ident);
            }
          case 89: break;
          case 3: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_IntConstant"), false)); return symbol(sym.integerConstant);
            }
          case 90: break;
          case 4: 
            { /* ignore */
            }
          case 91: break;
          case 5: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ArithmeticOperators);
            }
          case 92: break;
          case 6: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.dot);
            }
          case 93: break;
          case 7: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.negative);
            }
          case 94: break;
          case 8: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedCurlyBracket);
            }
          case 95: break;
          case 9: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningCurlyBracket);
            }
          case 96: break;
          case 10: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.sum);
            }
          case 97: break;
          case 11: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ComparisonOperators);
            }
          case 98: break;
          case 12: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.assignment);
            }
          case 99: break;
          case 13: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.denial);
            }
          case 100: break;
          case 14: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false,getColorForType("operador"))); return symbol(sym.dot);
            }
          case 101: break;
          case 15: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false,getColorForType("signo de puntuaciÃ³n"))); return symbol(sym.colon);
            }
          case 102: break;
          case 16: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false,getColorForType("signo de puntuaciÃ³n"))); return symbol(sym.dot);
            }
          case 103: break;
          case 17: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningParenthesis);
            }
          case 104: break;
          case 18: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedParenthesis);
            }
          case 105: break;
          case 19: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningBracket);
            }
          case 106: break;
          case 20: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedBracket);
            }
          case 107: break;
          case 21: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.pyc);
            }
          case 108: break;
          case 22: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.comma);
            }
          case 109: break;
          case 23: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sAbstract);
            }
          case 110: break;
          case 24: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sDo);
            }
          case 111: break;
          case 25: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("operador"))); return symbol(sym.sAbstract);
            }
          case 112: break;
          case 26: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sIn);
            }
          case 113: break;
          case 27: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.cIf);
            }
          case 114: break;
          case 28: 
            { String tipo = "error";
    this.tokens.add(new Yytoken(
        yytext(), yyline, yycolumn,
        "Identificador no vÃ¡lido iniciado con nÃºmero",
        true,
        getColorForType(tipo)
    ));
            }
          case 115: break;
          case 29: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_DoubleConstant"), false)); return symbol(sym.doubleConstant);
            }
          case 116: break;
          case 30: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Comentario", false,getColorForType("comentario")));
            }
          case 117: break;
          case 31: 
            { this.tokens.add(new Yytoken("", yyline, yycolumn, "The character '*/' wasn't found", true)); /* It's error so it doesn't return nothing */
            }
          case 118: break;
          case 32: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false,getColorForType("operador"))); return symbol(sym.IncrementOperator);
            }
          case 119: break;
          case 33: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_String"), false)); return symbol(sym.stringConstant);
            }
          case 120: break;
          case 34: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.CurlyBrackets);
            }
          case 121: break;
          case 35: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.and);
            }
          case 122: break;
          case 36: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.or);
            }
          case 123: break;
          case 37: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.Brackets);
            }
          case 124: break;
          case 38: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sSet);
            }
          case 125: break;
          case 39: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sTry);
            }
          case 126: break;
          case 40: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sRef);
            }
          case 127: break;
          case 41: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sOut);
            }
          case 128: break;
          case 42: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNew);
            }
          case 129: break;
          case 43: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.INT);
            }
          case 130: break;
          case 44: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sGet);
            }
          case 131: break;
          case 45: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.lFor);
            }
          case 132: break;
          case 133: break;
          case 47: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_String", false)); return symbol(sym.stringConstant);
            }
          case 134: break;
          case 48: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "caracter", false)); return symbol(sym.stringConstant);
            }
          case 135: break;
          case 49: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.BOOL);
            }
          case 136: break;
          case 50: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.boolConstant);
            }
          case 137: break;
          case 51: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sThis);
            }
          case 138: break;
          case 52: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sCase);
            }
          case 139: break;
          case 53: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.cElse);
            }
          case 140: break;
          case 54: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNull);
            }
          case 141: break;
          case 55: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.sVoid);
            }
          case 142: break;
          case 56: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sBreak);
            }
          case 143: break;
          case 57: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sCatch);
            }
          case 144: break;
          case 58: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sClass);
            }
          case 145: break;
          case 59: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sUsing);
            }
          case 146: break;
          case 60: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("t_logicalconstant"))); return symbol(sym.boolConstant);
            }
          case 147: break;
          case 61: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.sAbstract);
            }
          case 148: break;
          case 62: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sPrint);
            }
          case 149: break;
          case 63: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.lWhile);
            }
          case 150: break;
          case 64: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sStatic);
            }
          case 151: break;
          case 65: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.STRING);
            }
          case 152: break;
          case 66: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sSwitch);
            }
          case 153: break;
          case 67: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sReturn);
            }
          case 154: break;
          case 68: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.DOUBLE);
            }
          case 155: break;
          case 69: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sMalloc);
            }
          case 156: break;
          case 70: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sParams);
            }
          case 157: break;
          case 71: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sPublic);
            }
          case 158: break;
          case 72: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sSetByte);
            }
          case 159: break;
          case 160: break;
          case 74: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sDefault);
            }
          case 161: break;
          case 75: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sGetByte);
            }
          case 162: break;
          case 76: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sForeach);
            }
          case 163: break;
          case 77: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sFinally);
            }
          case 164: break;
          case 78: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sVirtual);
            }
          case 165: break;
          case 79: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sPrivate);
            }
          case 166: break;
          case 80: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sReadLine);
            }
          case 167: break;
          case 81: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sOverride);
            }
          case 168: break;
          case 82: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNewArray);
            }
          case 169: break;
          case 83: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNameSpace);
            }
          case 170: break;
          case 84: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sInterface);
            }
          case 171: break;
          case 85: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sProtected);
            }
          case 172: break;
          case 173: break;
          case 87: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sReadInteger);
            }
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
