/* The following code was generated by JFlex 1.6.1 */

package View;

//Java Libraries
import java.util.ArrayList;

class Yytoken{
    public String token;
    public int line;
    public int column;
    public int length;
    public String type;
    public boolean error;

    Yytoken(String token, int line, int column, String type, boolean error){
        this.token = token;
        this.line = line+1;
        this.column = column+1;
        this.length = token.length()-1;
        this.type = type;
        this.error = error;
    }

    public String toString(){
        int aux = column + length;
        if(this.type.equals("T_Identifier")){
            if(token.length() > 31){
                String temp = this.token.substring(0,31);
                String aditional = this.token.substring(31);
                return temp + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type + " Number of characters greater than 31 - Discarded characters {"+aditional+"}";
            }
            else{
                return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
            }
        }
        else{
            return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
        }
    }

    public String isError(){
        int aux = column + length;
        return "*** Error LÃ©xico. Linea: " +line+ " Columnas: "+column+"-"+aux+" *** Mensaje Error: " + type + " \'" + token +"\'";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/omarm/IdeaProjects/Compilador/src/analyzer/Lex.flex</tt>
 */
public class LexicalScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\44\1\63\1\47\1\43\22\0\1\45\1\70\1\61"+
    "\2\0\1\64\1\71\1\0\1\73\1\74\1\51\1\65\1\102\1\57"+
    "\1\56\1\50\1\53\11\52\1\0\1\101\1\66\1\67\1\66\2\0"+
    "\1\30\1\37\2\55\1\60\1\55\1\36\1\41\1\33\2\41\1\34"+
    "\1\35\1\27\1\41\1\24\1\41\1\32\1\36\4\41\1\54\2\41"+
    "\1\75\1\62\1\76\1\0\1\42\1\0\1\22\1\7\1\21\1\4"+
    "\1\11\1\15\1\14\1\17\1\1\1\41\1\40\1\10\1\25\1\2"+
    "\1\5\1\26\1\41\1\13\1\12\1\3\1\6\1\20\1\16\1\23"+
    "\1\31\1\41\1\77\1\72\1\100\7\0\1\63\u1fa2\0\1\63\1\63"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\22\2\3\3\2\4\2\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\1\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\2\1\25"+
    "\25\2\1\3\1\26\1\27\3\0\1\30\1\0\1\12"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\25\17\2"+
    "\1\25\3\2\3\0\1\5\1\0\2\2\1\37\11\2"+
    "\1\27\1\0\26\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\103\0\u057f\0\u05c2"+
    "\0\103\0\u0605\0\u0648\0\103\0\u068b\0\u06ce\0\u068b\0\u0711"+
    "\0\u0754\0\u0754\0\u0797\0\u07da\0\u081d\0\103\0\u0860\0\103"+
    "\0\u08a3\0\103\0\103\0\103\0\u08e6\0\u0192\0\u0929\0\u096c"+
    "\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c"+
    "\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u06ce\0\103\0\u0ff7\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189"+
    "\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1"+
    "\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9"+
    "\0\u15fc\0\u0f71\0\u163f\0\u1682\0\u16c5\0\u0192\0\u1708\0\u174b"+
    "\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963"+
    "\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\7\1\14\1\15\1\7\1\16"+
    "\1\17\2\7\1\20\2\7\1\21\2\7\1\22\2\7"+
    "\1\23\1\24\3\7\1\2\1\25\2\26\1\27\1\0"+
    "\1\30\1\31\1\32\1\33\2\7\1\34\1\35\1\7"+
    "\1\36\1\2\1\0\1\31\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\104\0\1\7\1\55\12\7\1\56\7\7"+
    "\1\57\15\7\7\0\4\7\2\0\1\7\23\0\5\7"+
    "\1\60\34\7\7\0\4\7\2\0\1\7\23\0\12\7"+
    "\1\61\3\7\1\62\23\7\7\0\4\7\2\0\1\7"+
    "\23\0\4\7\1\63\35\7\7\0\4\7\2\0\1\7"+
    "\23\0\42\7\7\0\4\7\2\0\1\7\23\0\4\7"+
    "\1\64\5\7\1\65\27\7\7\0\4\7\2\0\1\7"+
    "\23\0\7\7\1\66\12\7\1\67\17\7\7\0\4\7"+
    "\2\0\1\7\23\0\2\7\1\70\37\7\7\0\4\7"+
    "\2\0\1\7\23\0\10\7\1\71\31\7\7\0\4\7"+
    "\2\0\1\7\23\0\4\7\1\72\14\7\1\73\20\7"+
    "\7\0\4\7\2\0\1\7\23\0\16\7\1\74\23\7"+
    "\7\0\4\7\2\0\1\7\23\0\4\7\1\75\35\7"+
    "\7\0\4\7\2\0\1\7\23\0\7\7\1\76\32\7"+
    "\7\0\4\7\2\0\1\7\23\0\12\7\1\77\27\7"+
    "\7\0\4\7\2\0\1\7\23\0\10\7\1\100\31\7"+
    "\7\0\4\7\2\0\1\7\23\0\10\7\1\101\31\7"+
    "\7\0\4\7\2\0\1\7\23\0\21\7\1\102\20\7"+
    "\7\0\4\7\2\0\1\7\23\0\10\7\1\103\31\7"+
    "\7\0\4\7\2\0\1\7\66\0\1\26\105\0\1\26"+
    "\103\0\1\104\1\105\103\0\2\32\2\0\1\106\47\0"+
    "\1\107\26\0\2\32\1\107\1\0\1\106\76\0\2\110"+
    "\27\0\44\111\1\0\14\111\1\112\1\113\20\111\67\0"+
    "\1\114\102\0\1\115\104\0\1\116\103\0\1\117\104\0"+
    "\1\120\104\0\1\121\104\0\1\122\3\0\2\7\1\123"+
    "\37\7\7\0\4\7\2\0\1\7\23\0\25\7\1\124"+
    "\14\7\7\0\4\7\2\0\1\7\23\0\7\7\1\125"+
    "\32\7\7\0\4\7\2\0\1\7\23\0\5\7\1\126"+
    "\34\7\7\0\4\7\2\0\1\7\23\0\1\127\41\7"+
    "\7\0\4\7\2\0\1\7\23\0\5\7\1\130\34\7"+
    "\7\0\4\7\2\0\1\7\23\0\4\7\1\125\35\7"+
    "\7\0\4\7\2\0\1\7\23\0\10\7\1\131\31\7"+
    "\7\0\4\7\2\0\1\7\23\0\11\7\1\132\30\7"+
    "\7\0\4\7\2\0\1\7\23\0\2\7\1\133\37\7"+
    "\7\0\4\7\2\0\1\7\23\0\12\7\1\134\27\7"+
    "\7\0\4\7\2\0\1\7\23\0\2\7\1\135\37\7"+
    "\7\0\4\7\2\0\1\7\23\0\12\7\1\56\27\7"+
    "\7\0\4\7\2\0\1\7\23\0\7\7\1\136\32\7"+
    "\7\0\4\7\2\0\1\7\23\0\1\137\41\7\7\0"+
    "\4\7\2\0\1\7\23\0\1\140\41\7\7\0\4\7"+
    "\2\0\1\7\23\0\21\7\1\141\20\7\7\0\4\7"+
    "\2\0\1\7\23\0\1\142\41\7\7\0\4\7\2\0"+
    "\1\7\23\0\15\7\1\143\24\7\7\0\4\7\2\0"+
    "\1\7\23\0\21\7\1\144\20\7\7\0\4\7\2\0"+
    "\1\7\23\0\7\7\1\145\32\7\7\0\4\7\2\0"+
    "\1\7\23\0\2\7\1\146\37\7\7\0\4\7\2\0"+
    "\1\7\22\0\43\104\1\25\1\26\36\104\50\105\1\147"+
    "\1\150\31\105\11\0\1\151\40\0\2\106\4\0\1\151"+
    "\26\0\1\152\2\0\1\152\1\0\1\152\3\0\1\152"+
    "\3\0\2\152\5\0\1\152\6\0\1\152\12\0\2\152"+
    "\1\0\1\152\2\0\1\152\74\0\2\110\2\0\1\153"+
    "\24\0\43\111\2\0\2\111\1\0\13\111\1\0\17\111"+
    "\1\0\10\7\1\154\31\7\7\0\4\7\2\0\1\7"+
    "\23\0\7\7\1\155\32\7\7\0\4\7\2\0\1\7"+
    "\23\0\7\7\1\56\32\7\7\0\4\7\2\0\1\7"+
    "\23\0\10\7\1\156\31\7\7\0\4\7\2\0\1\7"+
    "\23\0\11\7\1\56\30\7\7\0\4\7\2\0\1\7"+
    "\23\0\6\7\1\137\33\7\7\0\4\7\2\0\1\7"+
    "\23\0\21\7\1\157\20\7\7\0\4\7\2\0\1\7"+
    "\23\0\10\7\1\56\31\7\7\0\4\7\2\0\1\7"+
    "\23\0\10\7\1\160\31\7\7\0\4\7\2\0\1\7"+
    "\23\0\1\161\41\7\7\0\4\7\2\0\1\7\23\0"+
    "\5\7\1\162\34\7\7\0\4\7\2\0\1\7\23\0"+
    "\11\7\1\126\30\7\7\0\4\7\2\0\1\7\23\0"+
    "\7\7\1\132\32\7\7\0\4\7\2\0\1\7\23\0"+
    "\3\7\1\56\36\7\7\0\4\7\2\0\1\7\23\0"+
    "\11\7\1\127\30\7\7\0\4\7\2\0\1\7\23\0"+
    "\1\7\1\163\40\7\7\0\4\7\2\0\1\7\23\0"+
    "\27\7\1\164\12\7\7\0\4\7\2\0\1\7\23\0"+
    "\3\7\1\165\36\7\7\0\4\7\2\0\1\7\23\0"+
    "\7\7\1\166\32\7\7\0\4\7\2\0\1\7\23\0"+
    "\36\7\1\167\3\7\7\0\4\7\2\0\1\7\22\0"+
    "\51\147\1\150\101\147\1\26\1\150\31\147\52\0\2\170"+
    "\3\0\1\171\5\0\1\171\26\0\1\151\40\0\2\153"+
    "\4\0\1\151\23\0\12\7\1\172\27\7\7\0\4\7"+
    "\2\0\1\7\23\0\10\7\1\173\31\7\7\0\4\7"+
    "\2\0\1\7\23\0\37\7\1\56\2\7\7\0\4\7"+
    "\2\0\1\7\23\0\1\7\1\174\40\7\7\0\4\7"+
    "\2\0\1\7\23\0\1\7\1\175\40\7\7\0\4\7"+
    "\2\0\1\7\23\0\12\7\1\176\27\7\7\0\4\7"+
    "\2\0\1\7\23\0\2\7\1\56\37\7\7\0\4\7"+
    "\2\0\1\7\23\0\12\7\1\177\27\7\7\0\4\7"+
    "\2\0\1\7\23\0\32\7\1\200\1\201\6\7\7\0"+
    "\4\7\2\0\1\7\23\0\4\7\1\202\35\7\7\0"+
    "\4\7\2\0\1\7\23\0\30\7\1\203\11\7\7\0"+
    "\4\7\2\0\1\7\74\0\2\170\30\0\14\7\1\204"+
    "\25\7\7\0\4\7\2\0\1\7\23\0\24\7\1\205"+
    "\15\7\7\0\4\7\2\0\1\7\23\0\3\7\1\127"+
    "\36\7\7\0\4\7\2\0\1\7\23\0\13\7\1\56"+
    "\26\7\7\0\4\7\2\0\1\7\23\0\1\7\1\56"+
    "\40\7\7\0\4\7\2\0\1\7\23\0\12\7\1\206"+
    "\27\7\7\0\4\7\2\0\1\7\23\0\1\7\1\207"+
    "\40\7\7\0\4\7\2\0\1\7\23\0\1\210\41\7"+
    "\7\0\4\7\2\0\1\7\23\0\20\7\1\56\21\7"+
    "\7\0\4\7\2\0\1\7\23\0\2\7\1\132\37\7"+
    "\7\0\4\7\2\0\1\7\23\0\21\7\1\211\20\7"+
    "\7\0\4\7\2\0\1\7\23\0\10\7\1\212\31\7"+
    "\7\0\4\7\2\0\1\7\23\0\21\7\1\213\20\7"+
    "\7\0\4\7\2\0\1\7\23\0\2\7\1\214\37\7"+
    "\7\0\4\7\2\0\1\7\23\0\1\7\1\132\40\7"+
    "\7\0\4\7\2\0\1\7\23\0\20\7\1\132\21\7"+
    "\7\0\4\7\2\0\1\7\23\0\1\7\1\215\40\7"+
    "\7\0\4\7\2\0\1\7\23\0\30\7\1\56\11\7"+
    "\7\0\4\7\2\0\1\7\23\0\10\7\1\216\31\7"+
    "\7\0\4\7\2\0\1\7\23\0\2\7\1\127\37\7"+
    "\7\0\4\7\2\0\1\7\23\0\13\7\1\217\26\7"+
    "\7\0\4\7\2\0\1\7\23\0\10\7\1\72\31\7"+
    "\7\0\4\7\2\0\1\7\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\1\11\2\1\1\11\2\1\1\11"+
    "\11\1\1\11\1\1\1\11\1\1\3\11\32\1\3\0"+
    "\1\11\1\0\7\11\24\1\3\0\1\1\1\0\15\1"+
    "\1\0\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public ArrayList<Yytoken> tokens; /* our variable for storing token's info that will be the output */

    private String typeReservedWords(String text) {
        return  text.substring(0, 1).toUpperCase() + text.substring(1);
    }

    private String typeNumbers(String text, String type) {
        return type + " (value = " + text + ")";
    }

    private String isError(String token, int line, int column, int length, String error) {
        int aux = column + length;
        return "*** Line " + line + " *** Cols " + column + "-" + aux + " *** " + error + " \'" + token + "\'";
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
  this.tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "CarÃ¡cter no reconocido", true));
            }
          case 32: break;
          case 2: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Identificador", false));
            }
          case 33: break;
          case 3: 
            { /* ignorar */
            }
          case 34: break;
          case 4: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Operador AritmÃ©tico", false));
            }
          case 35: break;
          case 5: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "Constante Entera"), false));
            }
          case 36: break;
          case 6: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Punto", false));
            }
          case 37: break;
          case 7: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Operador Negativo", false));
            }
          case 38: break;
          case 8: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "caracter desconocido", true)); /* It's error so it doesn't return nothing */
            }
          case 39: break;
          case 9: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Operador de Suma", false));
            }
          case 40: break;
          case 10: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Operador de ComparaciÃ³n", false));
            }
          case 41: break;
          case 11: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Operador de AsignaciÃ³n", false));
            }
          case 42: break;
          case 12: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Operador de NegaciÃ³n", false));
            }
          case 43: break;
          case 13: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "ParÃ©ntesis Abierto", false));
            }
          case 44: break;
          case 14: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "ParÃ©ntesis Cerrado", false));
            }
          case 45: break;
          case 15: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Corchete Abierto", false));
            }
          case 46: break;
          case 16: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Corchete Cerrado", false));
            }
          case 47: break;
          case 17: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Llave Abierta", false));
            }
          case 48: break;
          case 18: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Llave Cerrada", false));
            }
          case 49: break;
          case 19: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Punto y Coma", false));
            }
          case 50: break;
          case 20: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Coma", false));
            }
          case 51: break;
          case 21: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false));
            }
          case 52: break;
          case 22: 
            { this.tokens.add(new Yytoken("", yyline, yycolumn, "No se encontrÃ³ el carÃ¡cter '*/'", true));
            }
          case 53: break;
          case 23: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "Constante Decimal"), false));
            }
          case 54: break;
          case 24: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Cadena", false));
            }
          case 55: break;
          case 25: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Operador de Igualdad", false));
            }
          case 56: break;
          case 26: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Operador LÃ³gico AND", false));
            }
          case 57: break;
          case 27: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Operador LÃ³gico OR", false));
            }
          case 58: break;
          case 28: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "ParÃ©ntesis", false));
            }
          case 59: break;
          case 29: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Corchetes", false));
            }
          case 60: break;
          case 30: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Llaves", false));
            }
          case 61: break;
          case 31: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Constante LÃ³gica", false));
            }
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
