/* The following code was generated by JFlex 1.6.1 */

/* ────────────────────────────────────────────────────────────────
   Archivo : LexicalScanner.flex
   Uso     : ① Análisis léxico para tu IDE   ② Entrada del parser CUP
   Cambios :
     • %cup  + %implements + %function next_token
     • import java_cup.runtime.Symbol
     • helpers sym() + wrapper yylex() para compatibilidad Swing
────────────────────────────────────────────────────────────────── */

package analyzer;

// Imports necesarios
import java.util.ArrayList;
import java_cup.runtime.Symbol;

// Clase auxiliar para coloreado y errores
class Yytoken {
    public String token;
    public int line;
    public int column;
    public int length;
    public String type;
    public boolean error;
    public String color;

    Yytoken(String token, int line, int column,
            String type, boolean error, String color) {
        this.token  = token;
        this.line   = line + 1;
        this.column = column + 1;
        this.length = token.length() - 1;
        this.type   = type;
        this.error  = error;
        this.color  = color;
    }

    public String toString() {
        int aux = column + length;
        return token + "\t\tLínea " + line + "\tcolumnas " + column + "-" + aux +
               "\tes " + type + "\tColor: " + color;
    }

    public String isError() {
        int aux = column + length;
        return "*** Error Léxico. Línea: " + line + " Columnas: " + column + "-" + aux +
               " *** Mensaje de Error: " + type + " '" + token + "'";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/omarm/IdeaProjects/Compilador/src/analyzer/Lexer.flex</tt>
 */
public class LexicalScanner implements java_cup.runtime.Scanner, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\41\1\43\1\44\1\42\22\0\1\0\1\66\1\36"+
    "\1\33\1\35\1\66\1\73\1\74\1\60\1\65\1\51\1\67\1\0"+
    "\1\56\1\55\1\50\1\52\11\47\1\0\1\0\1\70\1\71\1\72"+
    "\1\0\1\0\4\54\1\57\1\54\14\46\1\32\4\46\1\53\2\46"+
    "\1\61\1\40\1\63\1\62\1\46\1\0\1\1\1\2\1\6\1\15"+
    "\1\7\1\23\1\22\1\14\1\17\1\30\1\12\1\11\1\21\1\16"+
    "\1\10\1\26\1\34\1\5\1\3\1\4\1\20\1\24\1\27\1\25"+
    "\1\13\1\31\1\45\1\64\1\37\1\0\6\0\1\43\u1fa2\0\1\43"+
    "\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\33\1\2\2\14\1\2\3\1\4\5\3\1\4"+
    "\25\3\1\4\6\3\1\4\4\3\1\4\31\3\12\0"+
    "\2\5\1\6\1\7\1\10\2\0\1\10\1\11\2\0"+
    "\13\3\1\4\40\3\1\4\1\3\1\12\10\3\1\4"+
    "\20\3\7\0\1\13\2\0\1\14\4\0\2\6\2\0"+
    "\1\5\1\0\1\15\2\3\1\12\50\3\10\0\1\5"+
    "\1\0\27\3\5\0\11\3\4\0\3\3\2\0\2\3"+
    "\1\0\1\3\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\75\0\u06ac\0\u06e9\0\u0726"+
    "\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u029f\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u029f\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404"+
    "\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec"+
    "\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4"+
    "\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc"+
    "\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4"+
    "\0\u06e9\0\u1be1\0\u1c1e\0\u1c5b\0\75\0\u1c98\0\u1cd5\0\u0763"+
    "\0\75\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u1ebd\0\u0b70\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213"+
    "\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb"+
    "\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3"+
    "\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb"+
    "\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3"+
    "\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b"+
    "\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83"+
    "\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b"+
    "\0\u2fa8\0\u2fe5\0\75\0\u3022\0\u305f\0\75\0\u309c\0\u30d9"+
    "\0\u3116\0\u3153\0\75\0\u3190\0\u31cd\0\u320a\0\u1c98\0\u3247"+
    "\0\75\0\u3284\0\u32c1\0\u029f\0\u32fe\0\u333b\0\u3378\0\u33b5"+
    "\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d"+
    "\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785"+
    "\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d"+
    "\0\u39aa\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3b55"+
    "\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d"+
    "\0\u3d7a\0\u3db7\0\u3df4\0\u3e31\0\u3e6e\0\u3e6e\0\u3eab\0\u040d"+
    "\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093"+
    "\0\u40d0\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b"+
    "\0\u42b8\0\u42f5\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u4426\0\u4463"+
    "\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u460e\0\u464b"+
    "\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c\0\u47b9\0\u47f6\0\u4833"+
    "\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u4964\0\u49a1\0\u49de\0\u4a1b"+
    "\0\u4a58\0\u4a95\0\u4ad2\0\u4b0f\0\u4b4c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\14\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\14\1\26\1\27"+
    "\1\30\1\14\1\31\1\32\1\14\1\33\1\34\2\2"+
    "\1\35\1\36\1\0\1\35\1\2\1\14\1\37\1\40"+
    "\1\41\1\42\2\14\1\2\1\43\1\14\2\2\1\41"+
    "\1\2\1\44\1\2\1\41\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\76\0\1\53\1\54\1\55\11\53\1\56"+
    "\11\53\1\57\3\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\1\60\3\53\1\61\2\53"+
    "\1\62\2\53\1\63\17\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\1\53\1\64\1\53"+
    "\1\65\1\53\1\66\1\67\4\53\1\70\2\53\1\71"+
    "\7\53\1\72\3\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\4\53\1\73\5\53\1\74"+
    "\1\75\16\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\6\53\1\76\23\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\1\77"+
    "\6\53\1\100\1\101\2\53\1\102\16\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\10\53"+
    "\1\60\4\53\1\103\5\53\1\104\1\105\5\53\1\0"+
    "\1\106\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\1\53\1\107\2\53\1\110\10\53\1\111\1\53\1\112"+
    "\3\53\1\113\1\53\1\114\4\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\6\53\1\112"+
    "\1\115\22\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\32\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\16\53\1\116\13\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\6\53\1\117\1\120\2\53\1\121\17\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\1\122\5\53\1\123\10\53\1\124\12\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\2\53"+
    "\1\111\12\53\1\125\2\53\1\126\1\53\1\111\7\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\2\53\1\127\5\53\1\130\4\53\1\131\1\132"+
    "\13\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\1\133\31\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\4\53\1\134\1\53"+
    "\1\135\1\136\1\137\21\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\1\140\3\53\1\141"+
    "\2\53\1\142\1\143\5\53\1\144\13\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\1\145"+
    "\6\53\1\146\6\53\1\147\13\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\1\150\3\53"+
    "\1\151\12\53\1\152\12\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\13\53\1\153\2\53"+
    "\1\154\13\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\7\53\1\155\22\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\3\53"+
    "\1\156\26\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\22\0\1\157\1\0\1\160\1\0\1\161"+
    "\3\0\1\162\1\163\1\164\1\165\5\0\1\166\104\0"+
    "\1\167\116\0\1\170\55\0\1\35\102\0\1\171\2\0"+
    "\1\171\2\0\1\172\67\0\1\173\1\174\17\0\1\175"+
    "\74\0\1\175\30\0\1\176\21\0\1\171\2\0\1\171"+
    "\1\176\1\0\1\172\66\0\1\177\2\0\1\177\3\0"+
    "\1\175\12\0\1\175\67\0\1\175\4\0\1\175\52\0"+
    "\1\177\2\0\1\177\14\0\1\175\1\0\1\175\73\0"+
    "\1\200\1\175\74\0\1\175\1\201\73\0\1\175\1\200"+
    "\73\0\1\175\1\0\1\175\1\0\40\202\1\203\1\0"+
    "\32\202\2\0\2\53\1\204\27\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\12\53\1\205"+
    "\17\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\14\53\1\111\15\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\1\206\31\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\2\53\1\207\27\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\6\53\1\210\23\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\7\53\1\211\22\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\3\53\1\207\26\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\12\53\1\212\17\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\1\213\3\53\1\214"+
    "\25\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\7\53\1\215\22\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\1\216\2\53"+
    "\1\217\4\53\1\220\21\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\7\53\1\221\22\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\30\53\1\222\1\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\16\53\1\223\13\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\12\53\1\111\4\53\1\207\12\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\25\53"+
    "\1\222\4\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\4\53\1\224\11\53\1\225\13\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\1\226\2\53\1\227\1\53\1\230\12\53\1\231"+
    "\1\53\1\111\7\53\1\0\1\232\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\2\53\1\207\1\233\26\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\15\53\1\234\14\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\1\235\31\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\1\236\5\53\1\237\23\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\17\53\1\240\12\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\6\53\1\132\23\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\3\53\1\241\21\53"+
    "\1\242\4\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\17\53\1\243\12\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\27\53"+
    "\1\220\2\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\14\53\1\244\15\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\3\53"+
    "\1\111\26\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\6\53\1\245\23\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\6\53"+
    "\1\246\23\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\5\53\1\247\7\53\1\250\14\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\6\53\1\251\23\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\5\53\1\252\2\53"+
    "\1\253\11\53\1\254\7\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\17\53\1\255\12\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\15\53\1\256\14\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\20\53\1\257\11\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\26\53\1\260\3\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\10\53\1\261\21\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\3\53\1\262\12\53\1\112\13\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\25\53"+
    "\1\263\4\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\13\53\1\70\2\53\1\264\13\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\7\53\1\264\22\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\2\53\1\265\2\53"+
    "\1\266\24\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\15\53\1\112\14\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\10\53"+
    "\1\267\21\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\7\53\1\270\22\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\3\53"+
    "\1\217\26\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\3\53\1\271\26\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\7\53"+
    "\1\272\22\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\10\53\1\60\21\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\7\53"+
    "\1\240\22\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\4\53\1\273\25\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\7\53"+
    "\1\274\22\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\10\53\1\207\4\53\1\275\6\53"+
    "\1\276\5\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\4\53\1\111\3\53\1\277\21\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\10\53\1\300\5\53\1\301\13\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\4\53"+
    "\1\302\25\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\4\53\1\303\25\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\7\53"+
    "\1\304\6\53\1\305\13\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\1\53\1\306\30\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\6\53\1\307\7\53\1\310\13\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\3\53"+
    "\1\311\26\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\16\53\1\312\13\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\4\53"+
    "\1\313\25\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\24\0\1\314\72\0\1\315\3\0\1\316"+
    "\4\0\1\317\75\0\1\320\64\0\1\321\105\0\1\322"+
    "\77\0\1\323\67\0\1\324\63\0\1\325\67\0\36\167"+
    "\1\326\1\0\1\327\1\0\3\167\1\330\27\167\61\0"+
    "\1\331\22\0\1\332\37\0\1\172\2\0\1\172\4\0"+
    "\1\332\15\0\41\173\1\333\1\334\32\173\50\174\1\335"+
    "\1\336\23\174\1\0\2\337\3\0\2\337\5\0\1\337"+
    "\5\0\1\337\23\0\1\337\2\0\1\337\1\0\1\337"+
    "\2\0\1\337\64\0\1\177\2\0\1\177\2\0\1\340"+
    "\113\0\1\341\1\0\2\202\1\0\2\202\10\0\1\202"+
    "\4\0\2\202\11\0\1\202\1\0\1\202\11\0\1\202"+
    "\21\0\1\202\1\0\3\53\1\342\26\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\15\53"+
    "\1\343\14\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\16\53\1\112\13\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\6\53"+
    "\1\111\23\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\1\247\31\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\10\53\1\344"+
    "\21\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\3\53\1\345\1\53\1\346\24\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\16\53\1\347\1\350\12\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\25\53\1\276\4\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\10\53\1\276\21\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\1\53\1\64\30\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\6\53\1\350\23\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\4\53\1\112\25\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\6\53\1\351\23\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\3\53\1\233\26\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\7\53\1\352\22\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\2\53\1\111\27\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\14\53\1\353\15\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\17\53\1\354\12\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\7\53\1\355\22\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\7\53\1\356\22\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\17\53\1\357\12\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\5\53\1\311\24\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\2\53\1\112\1\360\26\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\2\53\1\225"+
    "\27\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\4\53\1\111\25\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\5\53\1\361"+
    "\24\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\20\53\1\111\11\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\6\53\1\362"+
    "\23\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\10\53\1\363\21\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\1\364\31\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\6\53\1\365\23\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\4\53\1\366\25\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\4\53\1\367\25\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\11\53\1\111\20\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\21\53\1\111\10\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\10\53\1\56\21\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\16\53\1\370\13\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\6\53\1\371\23\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\1\372\31\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\1\53\1\373\30\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\1\374\31\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\6\53\1\375\23\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\1\376"+
    "\31\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\10\53\1\111\21\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\6\53\1\377"+
    "\1\111\22\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\10\53\1\u0100\21\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\15\53"+
    "\1\250\14\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\1\u0101\31\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\13\53\1\u0102"+
    "\16\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\10\53\1\u0103\21\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\17\53\1\u0104"+
    "\12\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\7\53\1\111\22\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\1\53\1\u0105"+
    "\30\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\6\53\1\u0106\23\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\1\112\31\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\1\u0107\31\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\6\53\1\56\23\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\17\53\1\207\12\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\1\u0108\31\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\14\53"+
    "\1\344\15\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\3\53\1\u0109\26\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\1\u010a"+
    "\31\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\3\53\1\u010b\26\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\15\53\1\112"+
    "\5\53\1\u010c\6\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\10\53\1\345\21\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\4\53\1\207\25\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\10\53\1\207\21\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\13\53\1\111\16\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\15\53\1\111\14\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\16\53\1\347\13\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\37\0\1\u010d\57\0\1\u010e\72\0"+
    "\1\u010f\13\0\1\164\72\0\1\u0110\75\0\1\u010f\101\0"+
    "\1\161\62\0\1\u0111\100\0\1\u0112\60\0\1\u0113\73\0"+
    "\41\167\4\0\30\167\37\330\1\167\35\330\62\0\1\u0114"+
    "\61\0\1\u0115\2\0\1\u0115\3\0\1\u0116\10\0\1\u0116"+
    "\46\0\1\333\33\0\51\335\1\336\73\335\1\333\1\336"+
    "\23\335\7\0\1\332\37\0\1\340\2\0\1\340\4\0"+
    "\1\332\16\0\4\53\1\u0117\25\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\5\53\1\111"+
    "\24\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\16\53\1\343\13\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\11\53\1\u0118"+
    "\20\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\15\53\1\u0119\14\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\5\53\1\112"+
    "\24\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\7\53\1\u011a\22\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\26\53\1\111"+
    "\3\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\7\53\1\u011b\1\u011c\5\53\1\u011d\13\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\4\53\1\312\25\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\4\53\1\56\25\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\23\53\1\207\6\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\16\53\1\u011e\13\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\16\53\1\u011f\13\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\11\53\1\276\20\53"+
    "\1\0\1\53\11\0\2\53\2\0\3\53\2\0\1\53"+
    "\16\0\4\53\1\312\10\53\1\u0120\14\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\16\53"+
    "\1\u0121\13\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\10\53\1\225\21\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\4\53"+
    "\1\u0122\25\53\1\0\1\53\11\0\2\53\2\0\3\53"+
    "\2\0\1\53\16\0\4\53\1\u0123\25\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\1\u0124"+
    "\31\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\20\53\1\u0105\11\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\21\53\1\u010c"+
    "\10\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\17\53\1\u0125\12\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\10\53\1\u0126"+
    "\21\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\20\53\1\345\11\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\2\53\1\u0127"+
    "\4\53\1\u011a\22\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\4\53\1\u0128\25\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\4\53\1\u0129\25\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\6\53\1\u012a\7\53\1\u0121"+
    "\13\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\22\53\1\207\7\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\6\53\1\237"+
    "\23\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\7\53\1\343\22\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\25\53\1\111"+
    "\4\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\1\261\31\53\1\0\1\53\11\0\2\53"+
    "\2\0\3\53\2\0\1\53\16\0\1\233\31\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\10\53\1\u012b\21\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\3\53\1\u012c\26\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\17\53\1\u0105\12\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\20\53\1\225\11\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\6\53\1\u012d\23\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\1\212\31\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\34\0\1\u012e"+
    "\65\0\1\u012f\73\0\1\323\72\0\1\157\11\0\1\164"+
    "\66\0\1\u0130\72\0\1\164\107\0\1\u0131\113\0\1\u0132"+
    "\102\0\1\u0115\2\0\1\u0115\23\0\1\350\31\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\21\53\1\344\10\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\22\53\1\111\7\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\15\53\1\u012b\14\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\16\53\1\u0133\13\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\15\53\1\u0134\14\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\4\53\1\276\25\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\15\53\1\277\14\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\14\53\1\225\15\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\5\53\1\206\24\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\1\53\1\u0135\30\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\16\53\1\u0136\13\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\3\53\1\u0137\26\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\10\53\1\112\21\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\6\53\1\344\23\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\25\53\1\u0138\4\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\4\53\1\u0139\25\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\15\53\1\u0105\4\53\1\u0138\7\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\20\53\1\u013a"+
    "\11\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\10\53\1\u0135\21\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\16\53\1\310"+
    "\13\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\5\53\1\u013b\24\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\25\0\1\u013c\71\0"+
    "\1\323\70\0\1\u013d\114\0\1\u013e\113\0\1\u013f\35\0"+
    "\15\53\1\207\14\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\3\53\1\u0140\26\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\12\53\1\111\17\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\14\53\1\207\15\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\16\0"+
    "\7\53\1\236\22\53\1\0\1\53\11\0\2\53\2\0"+
    "\3\53\2\0\1\53\16\0\1\u0141\31\53\1\0\1\53"+
    "\11\0\2\53\2\0\3\53\2\0\1\53\16\0\1\u0135"+
    "\31\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\6\53\1\u0142\23\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\3\53\1\276"+
    "\26\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\33\0\1\323\60\0\1\u0143\73\0\1\323\131\0"+
    "\1\u0144\37\0\6\53\1\u0145\23\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\5\53\1\207"+
    "\24\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\16\0\15\53\1\u0146\14\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\26\0\1\u010f\146\0"+
    "\1\u0147\12\0\21\53\1\u0148\10\53\1\0\1\53\11\0"+
    "\2\53\2\0\3\53\2\0\1\53\16\0\3\53\1\225"+
    "\26\53\1\0\1\53\11\0\2\53\2\0\3\53\2\0"+
    "\1\53\101\0\1\u0149\11\0\6\53\1\236\23\53\1\0"+
    "\1\53\11\0\2\53\2\0\3\53\2\0\1\53\55\0"+
    "\1\u014a\111\0\1\u014b\104\0\1\u014c\60\0\1\u014d\61\0"+
    "\1\326\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19337];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\32\1\1\11\121\1\12\0\4\1\1\11"+
    "\2\0\1\1\1\11\2\0\110\1\7\0\1\11\2\0"+
    "\1\11\4\0\1\11\1\1\2\0\1\1\1\0\1\11"+
    "\53\1\10\0\1\1\1\0\27\1\5\0\11\1\4\0"+
    "\3\1\2\0\2\1\1\0\1\1\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    this.tokens = new ArrayList<Yytoken>();
}

%{
/* Código Java insertado */
public ArrayList<Yytoken> tokens;

/* Asignar color a tipos */
private String getColorForType(String tipo) {
    return switch (tipo.toLowerCase()) {
        case "palabra reservada"             -> "#2563EB";
        case "tipo de dato"                  -> "#8B5CF6";
        case "identificador"                 -> "#000000";
        case "número"                        -> "#10B981";
        case "cadena"                        -> "#F59E0B";
        case "operador"                      -> "#fb5404";
        case "comentario"                    -> "#1bb400";
        case "signo de puntuación"           -> "#E11D48";
        case "directiva de procesamiento"    -> "#DB3069";
        case "error"                         -> "#FF1493";
        default                               -> "#000000";
    };
}

/* Helpers para CUP */
private Symbol sym(int id)                   { return new Symbol(id, yyline+1, yycolumn+1); }
private Symbol sym(int id, Object value)     { return new Symbol(id, yyline+1, yycolumn+1, value); }

/* Wrapper para mantener compatibilidad con tu Swing */
public Symbol yylex() throws java.io.IOException { return next_token(); }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String tipo = "error";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, true, getColorForType(tipo)));
    return sym(sym.ERROR);
            }
          case 14: break;
          case 2: 
            { /* ignorar */
            }
          case 15: break;
          case 3: 
            { String tipo = "identificador";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
    return sym(sym.IDENT, yytext());
            }
          case 16: break;
          case 4: 
            { String tipo = "palabra reservada";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
    return sym(sym.RESERVED);
            }
          case 17: break;
          case 5: 
            { String tipo = "número";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
    return sym(sym.NUMBER, yytext());
            }
          case 18: break;
          case 6: 
            { String tipo = "comentario";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
    return yylex();
            }
          case 19: break;
          case 7: 
            { String tipo = "error";
    tokens.add(new Yytoken("", yyline, yycolumn, "No se encontró '*/'", true, getColorForType(tipo)));
    return sym(sym.ERROR);
            }
          case 20: break;
          case 8: 
            { String tipo = "operador";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
    return sym(sym.OP);
            }
          case 21: break;
          case 9: 
            { String tipo = "signo de puntuación";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
    return sym(sym.PUNCT);
            }
          case 22: break;
          case 10: 
            { String tipo = "tipo de dato";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
    return sym(sym.TYPE);
            }
          case 23: break;
          case 11: 
            { String tipo = "directiva de procesamiento";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
    return sym(sym.DIRECTIVE);
            }
          case 24: break;
          case 12: 
            { String tipo = "cadena";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
    return sym(sym.STRING_LIT, yytext());
            }
          case 25: break;
          case 13: 
            { String tipo = "carácter";
    tokens.add(new Yytoken(yytext(), yyline, yycolumn, tipo, false, getColorForType(tipo)));
    return sym(sym.CHAR_LIT, yytext());
            }
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
