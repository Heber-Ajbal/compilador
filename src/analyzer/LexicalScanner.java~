/* The following code was generated by JFlex 1.6.1 */

/* User code */
package lexical.scanner.mini.c;

//Java Libraries

import java.util.ArrayList;
import java_cup.runtime.Symbol;

class Yytoken{
    public String token;
    public int line;
    public int column;
    public int length;
    public String type;
    public boolean error;
    public String color;

    Yytoken(String token, int line, int column, String type, boolean error,String color){
        this.token = token;
        this.line = line+1;
        this.column = column+1;
        this.length = token.length()-1;
        this.type = type;
        this.error = error;
        this.color = color;
    }

     Yytoken(String token, int line, int column, String type, boolean error) {
            this(token, line, column, type, error, "#000000"); // o cualquier color por defecto
        }

    public String toString(){
        int aux = column + length;
        if(this.type.equals("T_Identifier")){
            if(token.length() > 31){
                String temp = this.token.substring(0,31);
                String aditional = this.token.substring(31);
                return temp + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type + " Number of characters greater than 31 - Discarded characters {"+aditional+"}";
            }
            else{
                return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
            }
        }
        else{
            return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
        }
    }

    public String isError(){
        int aux = column + length;
        return "*** Error LÃ©xico. Linea: " +line+ " Columnas: "+column+"-"+aux+" *** Mensaje Error: " + type + " \'" + token +"\'";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/omarm/IdeaProjects/Compilador/src/analyzer/Lexer.flex</tt>
 */
public class LexicalScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\52\1\50\1\65\1\53\1\47\22\0\1\51\1\77\1\63"+
    "\1\42\1\66\1\72\1\100\1\71\1\105\1\106\1\55\1\73\1\112"+
    "\1\61\1\46\1\54\1\56\11\45\1\104\1\111\1\74\1\75\1\76"+
    "\1\104\1\0\1\31\1\40\2\60\1\62\1\60\2\44\1\35\2\44"+
    "\1\36\1\44\1\30\1\44\1\33\1\44\1\34\1\37\4\44\1\57"+
    "\2\44\1\107\1\64\1\110\1\102\1\44\1\0\1\1\1\2\1\6"+
    "\1\15\1\7\1\23\1\22\1\14\1\17\1\32\1\12\1\11\1\21"+
    "\1\16\1\10\1\26\1\43\1\5\1\3\1\4\1\20\1\24\1\27"+
    "\1\25\1\13\1\41\1\70\1\101\1\67\1\103\6\0\1\65\u1fa2\0"+
    "\1\65\1\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\32\2\1\1\1\3\1\4\3\5\2\6"+
    "\1\3\1\7\2\1\1\10\1\11\1\1\1\12\1\13"+
    "\1\14\1\13\1\15\4\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\2\1\0\3\2\1\26"+
    "\26\2\1\26\6\2\1\26\4\2\1\27\1\26\1\2"+
    "\1\30\34\2\10\0\1\31\1\32\1\33\3\0\1\34"+
    "\2\0\1\35\2\0\1\13\1\36\1\37\1\40\1\41"+
    "\1\42\2\2\1\43\10\2\1\44\41\2\1\45\1\2"+
    "\1\46\7\2\1\47\3\2\1\50\15\2\1\45\5\2"+
    "\7\0\1\51\3\0\2\32\2\0\1\3\1\0\1\52"+
    "\2\0\1\53\2\2\1\54\7\2\1\55\10\2\1\56"+
    "\15\2\1\57\15\2\1\60\10\2\7\0\1\31\1\0"+
    "\1\61\12\2\1\62\16\2\1\63\3\2\1\64\1\65"+
    "\2\2\1\66\2\2\1\67\4\0\1\2\1\70\4\2"+
    "\1\71\5\2\1\72\4\2\1\73\4\2\1\74\3\0"+
    "\1\2\1\75\2\2\1\76\4\2\1\77\1\2\1\100"+
    "\1\0\1\2\1\101\2\2\1\102\4\2\1\103\1\104"+
    "\1\2\1\105\1\2\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0465"+
    "\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd"+
    "\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\113\0\u08ca"+
    "\0\113\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7"+
    "\0\113\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99\0\u0ce4"+
    "\0\u0d2f\0\u0d7a\0\u09ab\0\113\0\113\0\u0dc5\0\113\0\u0e10"+
    "\0\113\0\113\0\113\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87"+
    "\0\u0fd2\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df"+
    "\0\u122a\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437"+
    "\0\u1482\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f"+
    "\0\u16da\0\u0339\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c"+
    "\0\u18e7\0\u1932\0\u197d\0\u19c8\0\u1a13\0\u0339\0\u1a5e\0\u1aa9"+
    "\0\u0339\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6"+
    "\0\u1d01\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e"+
    "\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u211b\0\u2166"+
    "\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373\0\u23be"+
    "\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616"+
    "\0\u2661\0\u26ac\0\u0a8c\0\113\0\u26f7\0\u2742\0\113\0\u278d"+
    "\0\u27d8\0\113\0\113\0\113\0\113\0\113\0\113\0\u2823"+
    "\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u1068\0\u29e5\0\u2a30"+
    "\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88"+
    "\0\u2cd3\0\u2d1e\0\u2d69\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0"+
    "\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138"+
    "\0\u3183\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345\0\u3390"+
    "\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507\0\u3552\0\u359d\0\u35e8"+
    "\0\u3633\0\u367e\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u37f5\0\u3840"+
    "\0\u388b\0\u38d6\0\u3921\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u3a98"+
    "\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f\0\u3c5a\0\u3ca5\0\u3cf0"+
    "\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2\0\u3efd\0\u3f48"+
    "\0\u3f93\0\u3fde\0\u4029\0\u4074\0\u40bf\0\113\0\u410a\0\u4155"+
    "\0\u41a0\0\u41eb\0\113\0\u4236\0\u4281\0\u2661\0\u42cc\0\113"+
    "\0\u4317\0\u4362\0\113\0\u43ad\0\u43f8\0\u0339\0\u4443\0\u448e"+
    "\0\u44d9\0\u4524\0\u456f\0\u45ba\0\u4605\0\u0339\0\u4650\0\u469b"+
    "\0\u46e6\0\u4731\0\u477c\0\u47c7\0\u4812\0\u485d\0\u0339\0\u48a8"+
    "\0\u48f3\0\u493e\0\u4989\0\u49d4\0\u4a1f\0\u4a6a\0\u4ab5\0\u4b00"+
    "\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c\0\u0339\0\u4c77\0\u4cc2\0\u4d0d"+
    "\0\u4d58\0\u4da3\0\u4dee\0\u4e39\0\u4e84\0\u4ecf\0\u4f1a\0\u4f65"+
    "\0\u4fb0\0\u4ffb\0\u0339\0\u5046\0\u5091\0\u50dc\0\u5127\0\u5172"+
    "\0\u51bd\0\u5208\0\u5253\0\u529e\0\u52e9\0\u5334\0\u537f\0\u53ca"+
    "\0\u5415\0\u5460\0\u54ab\0\u54ab\0\u0339\0\u54f6\0\u5541\0\u558c"+
    "\0\u55d7\0\u5622\0\u566d\0\u56b8\0\u5703\0\u574e\0\u5799\0\u0339"+
    "\0\u57e4\0\u582f\0\u587a\0\u58c5\0\u5910\0\u595b\0\u59a6\0\u59f1"+
    "\0\u5a3c\0\u5a87\0\u5ad2\0\u5b1d\0\u5b68\0\u5bb3\0\u0339\0\u5bfe"+
    "\0\u5c49\0\u5c94\0\u0339\0\u0339\0\u5cdf\0\u5d2a\0\u0339\0\u5d75"+
    "\0\u5dc0\0\u0339\0\u5e0b\0\u5e56\0\u5ea1\0\u5eec\0\u5f37\0\u0339"+
    "\0\u5f82\0\u5fcd\0\u6018\0\u6063\0\u0339\0\u60ae\0\u60f9\0\u6144"+
    "\0\u618f\0\u61da\0\u0339\0\u6225\0\u6270\0\u62bb\0\u6306\0\u0339"+
    "\0\u6351\0\u639c\0\u63e7\0\u6432\0\u0339\0\u647d\0\u64c8\0\u6513"+
    "\0\u655e\0\u0339\0\u65a9\0\u65f4\0\u0339\0\u663f\0\u668a\0\u66d5"+
    "\0\u6720\0\u0339\0\u676b\0\u0339\0\u67b6\0\u6801\0\u0339\0\u684c"+
    "\0\u6897\0\u0339\0\u68e2\0\u692d\0\u6978\0\u69c3\0\u0339\0\u0339"+
    "\0\u6a0e\0\u0339\0\u6a59\0\u0339\0\u0339";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\14\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\14\1\26\1\27"+
    "\1\30\1\14\1\31\1\32\1\33\2\14\1\34\2\14"+
    "\1\35\2\14\1\36\1\37\1\40\2\41\1\42\1\0"+
    "\1\43\1\44\1\45\2\14\1\46\1\14\1\47\1\2"+
    "\1\0\1\50\1\51\1\52\1\53\1\44\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\114\0\2\14"+
    "\1\74\11\14\1\75\11\14\1\76\12\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\1\100\3\14"+
    "\1\101\2\14\1\102\2\14\1\103\26\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\1\14\1\104"+
    "\1\14\1\105\1\14\1\106\1\107\4\14\1\110\2\14"+
    "\1\111\7\14\1\112\12\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\4\14\1\113\5\14\1\114"+
    "\1\115\25\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\6\14\1\116\32\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\1\117\6\14\1\120"+
    "\1\121\2\14\1\122\25\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\10\14\1\123\4\14\1\124"+
    "\5\14\1\125\1\126\14\14\1\0\1\127\2\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\1\14\1\130\2\14"+
    "\1\131\10\14\1\132\1\14\1\133\3\14\1\134\1\14"+
    "\1\135\13\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\6\14\1\133\1\136\31\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\41\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\16\14"+
    "\1\137\22\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\6\14\1\140\1\141\2\14\1\142\26\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\1\143\5\14\1\144\10\14\1\145\21\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\2\14\1\146"+
    "\12\14\1\147\2\14\1\150\1\14\1\151\16\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\2\14"+
    "\1\152\5\14\1\153\4\14\1\154\1\155\22\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\1\156"+
    "\40\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\4\14\1\157\1\14\1\160\1\161\1\162\30\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\1\163\3\14\1\164\2\14\1\165\1\166\5\14\1\167"+
    "\22\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\1\170\6\14\1\171\6\14\1\172\22\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\1\173"+
    "\3\14\1\174\12\14\1\175\21\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\13\14\1\176\2\14"+
    "\1\177\22\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\6\14\1\200\32\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\7\14\1\201\31\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\4\14\1\202\34\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\6\14\1\203\32\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\3\14\1\204"+
    "\2\14\1\205\32\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\35\0\1\206\1\0\1\207\1\0\1\210"+
    "\3\0\1\211\1\212\1\213\1\214\5\0\1\215\131\0"+
    "\1\36\1\216\7\0\1\36\104\0\1\41\115\0\1\41"+
    "\113\0\1\217\1\220\17\0\1\64\112\0\1\64\42\0"+
    "\1\221\17\0\1\36\1\216\7\0\1\36\1\221\100\0"+
    "\1\222\10\0\1\222\2\0\1\64\13\0\1\64\15\0"+
    "\50\223\1\0\12\223\1\224\1\225\26\223\63\0\1\226"+
    "\116\0\1\227\23\0\50\230\1\0\13\230\1\231\4\230"+
    "\1\0\21\230\45\0\1\222\10\0\1\222\14\0\1\64"+
    "\1\0\1\64\111\0\1\63\1\232\112\0\1\233\1\65"+
    "\111\0\1\232\1\63\111\0\1\233\112\0\1\64\2\0"+
    "\1\234\107\0\1\64\3\0\1\235\117\0\1\236\114\0"+
    "\1\237\3\0\12\14\1\240\26\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\14\14\1\132\24\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\1\241\40\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\41\242\1\0\2\242\12\0\2\242\1\0"+
    "\1\242\31\0\2\14\1\243\36\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\6\14\1\244\32\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\7\14\1\245\31\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\3\14\1\243\35\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\12\14\1\246"+
    "\26\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\1\247\3\14\1\250\34\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\7\14\1\251\31\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\1\252\2\14\1\253\4\14\1\254\30\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\7\14\1\255"+
    "\31\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\40\14\1\256\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\16\14\1\257\22\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\12\14\1\132"+
    "\4\14\1\243\21\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\25\14\1\256\13\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\4\14\1\260"+
    "\11\14\1\261\22\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\1\262\2\14\1\263\1\14\1\264"+
    "\12\14\1\265\1\14\1\132\16\14\1\0\1\266\2\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\2\14\1\243"+
    "\1\267\35\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\15\14\1\270\23\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\1\271\40\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\1\272"+
    "\5\14\1\273\32\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\2\14\1\274\36\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\17\14\1\275"+
    "\21\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\6\14\1\155\32\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\3\14\1\276\21\14\1\277"+
    "\13\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\17\14\1\300\21\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\31\14\1\254\7\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\14\14"+
    "\1\301\24\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\3\14\1\132\35\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\6\14\1\302\32\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\6\14\1\303\32\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\5\14\1\304\7\14\1\305\23\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\6\14\1\306\32\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\5\14\1\307\2\14\1\310\11\14"+
    "\1\311\16\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\17\14\1\312\21\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\15\14\1\313\23\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\20\14\1\314\20\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\26\14\1\315\12\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\10\14\1\316"+
    "\30\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\3\14\1\317\12\14\1\133\22\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\25\14\1\320"+
    "\13\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\13\14\1\110\2\14\1\321\22\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\7\14\1\322"+
    "\31\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\2\14\1\323\2\14\1\324\33\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\15\14\1\133"+
    "\23\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\10\14\1\325\30\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\7\14\1\326\31\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\3\14"+
    "\1\327\35\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\3\14\1\330\35\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\7\14\1\331\31\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\10\14\1\332\30\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\7\14\1\275\31\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\4\14\1\333"+
    "\34\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\7\14\1\334\31\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\10\14\1\243\13\14\1\335"+
    "\14\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\4\14\1\132\3\14\1\336\30\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\10\14\1\337"+
    "\5\14\1\340\22\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\4\14\1\341\34\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\4\14\1\342"+
    "\34\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\7\14\1\343\6\14\1\344\22\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\1\14\1\345"+
    "\37\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\6\14\1\346\7\14\1\347\22\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\3\14\1\350"+
    "\35\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\26\14\1\351\12\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\16\14\1\352\22\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\16\14"+
    "\1\353\22\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\1\354\40\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\4\14\1\355\34\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\3\14"+
    "\1\356\35\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\37\0\1\357\110\0\1\360\3\0\1\361\4\0"+
    "\1\362\113\0\1\363\102\0\1\364\123\0\1\365\115\0"+
    "\1\366\105\0\1\367\101\0\1\370\114\0\1\371\35\0"+
    "\1\216\10\0\1\216\3\0\1\371\30\0\47\217\1\372"+
    "\1\373\42\217\54\220\1\374\1\375\35\220\1\0\2\376"+
    "\3\0\2\376\5\0\1\376\5\0\1\376\5\0\1\376"+
    "\6\0\1\376\4\0\1\376\10\0\1\376\1\0\1\376"+
    "\1\0\1\376\75\0\1\222\1\377\7\0\1\222\34\0"+
    "\47\223\2\0\2\223\1\0\11\223\1\0\25\223\50\226"+
    "\1\0\12\226\1\u0100\1\u0101\2\226\1\0\1\u0102\22\226"+
    "\71\0\1\u0103\22\0\2\230\1\0\2\230\10\0\1\230"+
    "\4\0\2\230\31\0\1\230\4\0\2\230\4\0\1\230"+
    "\22\0\15\14\1\u0104\23\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\16\14\1\133\22\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\41\242"+
    "\1\0\3\242\1\77\7\0\3\242\1\0\1\242\31\0"+
    "\6\14\1\132\32\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\1\u0105\40\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\10\14\1\u0106\30\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\3\14\1\u0107\1\14\1\u0108\33\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\16\14\1\u0109\1\u010a"+
    "\21\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\25\14\1\335\13\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\10\14\1\335\30\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\1\14"+
    "\1\u010b\37\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\6\14\1\u010a\32\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\4\14\1\133\34\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\6\14\1\u010c\32\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\3\14\1\267\35\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\7\14\1\u010d"+
    "\31\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\2\14\1\u010e\36\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\14\14\1\u010f\24\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\17\14"+
    "\1\u0110\21\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\7\14\1\u0111\31\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\7\14\1\u0112\31\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\17\14\1\u0113\21\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\5\14\1\350\33\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\2\14\1\133"+
    "\1\u0114\35\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\2\14\1\u0115\36\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\4\14\1\132\34\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\5\14\1\u0116\33\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\6\14\1\u0117\32\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\20\14\1\132"+
    "\20\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\6\14\1\u0118\32\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\10\14\1\u0119\30\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\1\u011a"+
    "\40\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\6\14\1\u011b\32\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\4\14\1\u011c\34\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\4\14"+
    "\1\u011d\34\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\11\14\1\132\27\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\21\14\1\132\17\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\10\14\1\75\30\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\16\14\1\u011e\22\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\6\14\1\u011f"+
    "\32\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\1\u0120\40\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\1\14\1\u0121\37\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\1\u0122\40\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\6\14\1\u0123\32\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\1\u0124\40\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\10\14\1\u0125\30\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\6\14\1\u0126\1\132\31\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\10\14\1\u0127\30\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\15\14"+
    "\1\u0128\23\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\15\14\1\305\23\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\1\u0129\40\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\13\14"+
    "\1\u012a\25\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\10\14\1\u012b\30\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\17\14\1\u012c\21\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\1\14\1\u012d\37\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\7\14\1\132\31\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\1\14\1\u012e"+
    "\37\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\2\14\1\u012f\36\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\6\14\1\u0130\32\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\1\u0131"+
    "\40\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\6\14\1\75\32\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\17\14\1\243\21\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\1\u0132"+
    "\40\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\14\14\1\u0133\24\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\3\14\1\u0134\35\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\1\u0135"+
    "\40\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\3\14\1\u0136\35\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\15\14\1\u0137\5\14\1\u0138"+
    "\15\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\10\14\1\u0139\30\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\4\14\1\243\34\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\10\14"+
    "\1\u013a\30\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\13\14\1\132\25\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\30\14\1\u0124\10\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\15\14\1\132\23\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\15\14\1\u0137\23\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\14\14\1\u013b"+
    "\24\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\16\14\1\u0109\22\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\37\14\1\u010b\1\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\52\0\1\u013c"+
    "\75\0\1\u013d\110\0\1\u013e\13\0\1\213\110\0\1\u013f"+
    "\113\0\1\u013e\117\0\1\210\100\0\1\u0140\116\0\1\u0141"+
    "\76\0\1\u0142\156\0\1\u0143\10\0\1\u0143\2\0\1\u0144"+
    "\11\0\1\u0144\67\0\1\373\42\0\55\374\1\375\111\374"+
    "\1\373\1\375\35\374\7\0\1\371\35\0\1\377\10\0"+
    "\1\377\3\0\1\371\30\0\47\226\2\0\2\226\1\0"+
    "\11\226\1\0\25\226\67\u0102\1\226\23\u0102\1\0\5\14"+
    "\1\132\33\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\11\14\1\u0145\27\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\16\14\1\u0104\22\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\11\14\1\u0146\27\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\15\14\1\u0147\23\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\5\14\1\133"+
    "\33\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\12\14\1\u0148\26\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\7\14\1\u0149\31\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\26\14"+
    "\1\132\12\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\7\14\1\u014a\1\u014b\5\14\1\u014c\22\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\4\14\1\u014d\34\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\4\14\1\75\34\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\23\14\1\243"+
    "\15\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\16\14\1\u014e\22\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\16\14\1\u014f\22\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\2\14"+
    "\1\u0150\36\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\11\14\1\335\27\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\4\14\1\352\10\14"+
    "\1\u0151\23\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\16\14\1\u0152\22\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\10\14\1\u0153\30\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\4\14\1\u0154\34\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\4\14\1\u0155\34\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\1\u0156\40\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\20\14\1\u0157\20\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\21\14\1\u0158\17\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\17\14\1\u0159"+
    "\21\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\10\14\1\u015a\30\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\20\14\1\u0107\20\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\2\14"+
    "\1\u015b\4\14\1\u0149\31\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\4\14\1\u015c\34\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\4\14"+
    "\1\u015d\34\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\6\14\1\u015e\7\14\1\u0152\22\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\21\14"+
    "\1\u015f\17\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\22\14\1\243\16\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\6\14\1\273\32\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\7\14\1\u0160\31\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\25\14\1\132\13\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\12\14\1\u0161"+
    "\26\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\1\u0162\40\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\6\14\1\u0163\32\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\1\267\40\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\3\14\1\u0164\35\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\3\14\1\u0165\35\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\17\14\1\u012e"+
    "\21\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\20\14\1\u0153\20\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\6\14\1\u0166\32\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\3\14"+
    "\1\u0167\35\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\1\u0168\40\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\16\14\1\u0169\22\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\6\14"+
    "\1\u016a\32\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\34\14\1\u014c\1\u014b\3\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\47\0\1\u016b\103\0"+
    "\1\u016c\111\0\1\366\110\0\1\206\11\0\1\213\104\0"+
    "\1\u016d\110\0\1\213\125\0\1\u016e\135\0\1\u0143\10\0"+
    "\1\u0143\35\0\1\u016f\40\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\21\14\1\u0170\17\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\3\14"+
    "\1\u0171\35\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\22\14\1\132\16\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\15\14\1\u0172\23\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\16\14\1\u0173\22\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\15\14\1\u0174\23\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\15\14\1\u0175"+
    "\23\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\4\14\1\335\34\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\15\14\1\336\23\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\14\14"+
    "\1\u0176\24\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\5\14\1\241\33\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\2\14\1\132\36\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\1\14\1\u0177\37\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\16\14\1\u0178\22\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\3\14\1\u0179"+
    "\35\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\1\u017a\40\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\1\246\40\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\10\14\1\133\30\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\6\14\1\u017b\32\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\25\14\1\u017c\13\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\4\14\1\u017d"+
    "\34\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\15\14\1\u012e\4\14\1\u017e\16\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\20\14\1\u017f"+
    "\20\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\5\14\1\u0180\33\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\3\14\1\u0181\35\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\10\14"+
    "\1\132\30\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\16\14\1\u0182\22\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\5\14\1\u0183\33\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\3\14\1\u0184\35\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\5\14\1\u0185\33\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\40\0\1\u0186\107\0"+
    "\1\366\106\0\1\u0187\132\0\1\u0188\72\0\10\14\1\u0189"+
    "\30\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\6\14\1\u018a\32\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\10\14\1\u0177\30\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\15\14"+
    "\1\u018b\23\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\3\14\1\u018c\35\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\2\14\1\u018d\36\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\12\14\1\132\26\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\14\14\1\243\24\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\7\14\1\272"+
    "\31\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\10\14\1\u0164\30\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\1\u018e\40\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\1\u018f\40\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\1\u0190\40\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\6\14\1\u0191\32\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\6\14\1\u0192\32\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\10\14\1\243\30\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\3\14\1\u0193\35\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\6\14\1\u0194"+
    "\32\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\46\0\1\366\76\0\1\u0195\111\0\1\366\112\0\10\14"+
    "\1\u0196\30\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\6\14\1\u0197\32\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\6\14\1\u0198\32\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\5\14\1\u0199\33\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\12\14\1\u019a\26\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\5\14\1\u019b"+
    "\33\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\15\14\1\u019c\23\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\6\14\1\u019d\32\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\41\0\1\u013e"+
    "\102\0\7\14\1\u0104\31\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\31\0\21\14\1\u019e\17\14\1\0"+
    "\3\14\1\77\7\0\3\14\1\0\1\14\31\0\6\14"+
    "\1\u019f\32\14\1\0\3\14\1\77\7\0\3\14\1\0"+
    "\1\14\31\0\6\14\1\u01a0\32\14\1\0\3\14\1\77"+
    "\7\0\3\14\1\0\1\14\31\0\3\14\1\u01a1\35\14"+
    "\1\0\3\14\1\77\7\0\3\14\1\0\1\14\31\0"+
    "\14\14\1\u01a2\24\14\1\0\3\14\1\77\7\0\3\14"+
    "\1\0\1\14\31\0\6\14\1\u01a3\32\14\1\0\3\14"+
    "\1\77\7\0\3\14\1\0\1\14\31\0\2\14\1\u01a4"+
    "\36\14\1\0\3\14\1\77\7\0\3\14\1\0\1\14"+
    "\31\0\4\14\1\u01a5\34\14\1\0\3\14\1\77\7\0"+
    "\3\14\1\0\1\14\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\1\11\1\1\1\11\7\1\1\11"+
    "\12\1\2\11\1\1\1\11\1\1\3\11\3\1\1\0"+
    "\106\1\10\0\3\1\3\0\1\11\2\0\1\11\2\0"+
    "\6\11\117\1\7\0\1\11\3\0\1\1\1\11\2\0"+
    "\1\1\1\0\1\11\2\0\1\11\70\1\7\0\1\1"+
    "\1\0\46\1\4\0\27\1\3\0\14\1\1\0\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private Symbol symbol(int type){
    return new Symbol(type, yyline, yycolumn, yytext());
}

private Symbol symbol(int type, Object value){
    return new Symbol(type, yyline, yycolumn, value);
}

public ArrayList<Yytoken> tokens; /* our variable for storing token's info that will be the output */

private String typeReservedWords(String text){
    return  "T_" + text.substring(0, 1).toUpperCase() + text.substring(1);
}

private String typeNumbers(String text, String type){
    return type + " (value = " + text + ")";
}

private String isError(String token, int line, int column, int length, String error){
    int aux = column + length;
    return "*** Line " +line+ " *** Cols "+column+"-"+aux+" *** " + error + " \'" + token +"\'";
}

private String getColorForType(String tipo) {
    return switch (tipo.toLowerCase()) {
        case "tipo de dato","t_int", "t_double", "t_bool", "t_void" -> "#8B5CF6"; // tipos de datos
        case "t_identifier" -> "#000000";
        case "t_logicalconstant", "t_intconstant", "t_doubleconstant", "t_string" -> "#10B981"; // constantes
        case "unrecognized char", "the character '*/' wasn't found" -> "#FF1493"; // errores
        case "operador","+", "-", "*", "/", "%", "=", "==", "!=", "<", ">", "<=", ">=", "&&", "||", "!" -> "#fb5404"; // operadores
        case "signo de puntuaciÃ³n",";", ",", ".", "(", ")", "[", "]", "{", "}" -> "#E11D48"; // puntuaciÃ³n
        case "directiva de procesamiento" -> "#DB3069";
        case "cadena" -> "#F59E0B";
        case "comentario" -> "#1bb400";
        default -> "#2563EB"; // palabras reservadas por defecto
    };
}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
  this.tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Unrecognized char", true)); /* It's error so it doesn't return nothing */
            }
          case 72: break;
          case 2: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_Identifier", false)); return symbol(sym.ident);
            }
          case 73: break;
          case 3: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_IntConstant"), false)); return symbol(sym.integerConstant);
            }
          case 74: break;
          case 4: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.dot);
            }
          case 75: break;
          case 5: 
            { /* ignore */
            }
          case 76: break;
          case 6: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ArithmeticOperators);
            }
          case 77: break;
          case 7: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.negative);
            }
          case 78: break;
          case 8: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedCurlyBracket);
            }
          case 79: break;
          case 9: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningCurlyBracket);
            }
          case 80: break;
          case 10: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.sum);
            }
          case 81: break;
          case 11: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ComparisonOperators);
            }
          case 82: break;
          case 12: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.assignment);
            }
          case 83: break;
          case 13: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.denial);
            }
          case 84: break;
          case 14: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false,getColorForType("operador"))); return symbol(sym.dot);
            }
          case 85: break;
          case 15: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false,getColorForType("signo de puntuaciÃ³n"))); return symbol(sym.dot);
            }
          case 86: break;
          case 16: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningParenthesis);
            }
          case 87: break;
          case 17: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedParenthesis);
            }
          case 88: break;
          case 18: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningBracket);
            }
          case 89: break;
          case 19: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedBracket);
            }
          case 90: break;
          case 20: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.pyc);
            }
          case 91: break;
          case 21: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.comma);
            }
          case 92: break;
          case 22: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sAbstract);
            }
          case 93: break;
          case 23: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("operador"))); return symbol(sym.sAbstract);
            }
          case 94: break;
          case 24: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.cIf);
            }
          case 95: break;
          case 25: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_DoubleConstant"), false)); return symbol(sym.doubleConstant);
            }
          case 96: break;
          case 26: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Comentario", false,getColorForType("comentario")));
            }
          case 97: break;
          case 27: 
            { this.tokens.add(new Yytoken("", yyline, yycolumn, "The character '*/' wasn't found", true)); /* It's error so it doesn't return nothing */
            }
          case 98: break;
          case 28: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_String"), false)); return symbol(sym.stringConstant);
            }
          case 99: break;
          case 29: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.CurlyBrackets);
            }
          case 100: break;
          case 30: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.equality);
            }
          case 101: break;
          case 31: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.and);
            }
          case 102: break;
          case 32: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.or);
            }
          case 103: break;
          case 33: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.Parenthesis);
            }
          case 104: break;
          case 34: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.Brackets);
            }
          case 105: break;
          case 35: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_Identifier", false)); return symbol(sym.namespaceName);
            }
          case 106: break;
          case 36: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sSet);
            }
          case 107: break;
          case 37: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNew);
            }
          case 108: break;
          case 38: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.INT);
            }
          case 109: break;
          case 39: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sGet);
            }
          case 110: break;
          case 40: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.lFor);
            }
          case 111: break;
          case 41: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Directiva de Procesamiento", false,getColorForType("Directiva de Procesamiento"))); return symbol(sym.Definepros);
            }
          case 112: break;
          case 42: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_String", false)); return symbol(sym.stringConstant);
            }
          case 113: break;
          case 43: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "caracter", false)); return symbol(sym.stringConstant);
            }
          case 114: break;
          case 44: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.BOOL);
            }
          case 115: break;
          case 45: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sThis);
            }
          case 116: break;
          case 46: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.cElse);
            }
          case 117: break;
          case 47: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNull);
            }
          case 118: break;
          case 48: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.sVoid);
            }
          case 119: break;
          case 49: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sBreak);
            }
          case 120: break;
          case 50: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sClass);
            }
          case 121: break;
          case 51: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sUsing);
            }
          case 122: break;
          case 52: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("t_logicalconstant"))); return symbol(sym.sAbstract);
            }
          case 123: break;
          case 53: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.sAbstract);
            }
          case 124: break;
          case 54: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sPrint);
            }
          case 125: break;
          case 55: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.lWhile);
            }
          case 126: break;
          case 56: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.STRING);
            }
          case 127: break;
          case 57: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sReturn);
            }
          case 128: break;
          case 58: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("tipo de dato"))); return symbol(sym.DOUBLE);
            }
          case 129: break;
          case 59: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sMalloc);
            }
          case 130: break;
          case 60: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sPublic);
            }
          case 131: break;
          case 61: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sSetByte);
            }
          case 132: break;
          case 62: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sExtends);
            }
          case 133: break;
          case 63: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sGetByte);
            }
          case 134: break;
          case 64: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sPrivate);
            }
          case 135: break;
          case 65: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sReadLine);
            }
          case 136: break;
          case 66: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNewArray);
            }
          case 137: break;
          case 67: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sNameSpace);
            }
          case 138: break;
          case 68: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sInterface);
            }
          case 139: break;
          case 69: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sProtected);
            }
          case 140: break;
          case 70: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sImplements);
            }
          case 141: break;
          case 71: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false, getColorForType("palabra reservada"))); return symbol(sym.sReadInteger);
            }
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
